// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Sample;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Sample
{
    public partial class DepositorProductionBackupContext
    {
        private IDepositorProductionBackupContextProcedures _procedures;

        public virtual IDepositorProductionBackupContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DepositorProductionBackupContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDepositorProductionBackupContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetCITDenominationByDatesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDestinationEmailsByAlertTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDeviceConfigByUserGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDeviceUsersByDeviceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<HashTransactionResult>().HasNoKey().ToView(null);
        }
    }

    public partial class DepositorProductionBackupContextProcedures : IDepositorProductionBackupContextProcedures
    {
        private readonly DepositorProductionBackupContext _context;

        public DepositorProductionBackupContextProcedures(DepositorProductionBackupContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetCITDenominationByDatesResult>> GetCITDenominationByDatesAsync(DateTime? startDate, DateTime? endDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Scale = 7,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Scale = 7,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCITDenominationByDatesResult>("EXEC @returnValue = [dbo].[GetCITDenominationByDates] @startDate, @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDestinationEmailsByAlertTypeResult>> GetDestinationEmailsByAlertTypeAsync(int? alertMessageTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "alertMessageTypeID",
                    Value = alertMessageTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDestinationEmailsByAlertTypeResult>("EXEC @returnValue = [dbo].[GetDestinationEmailsByAlertType] @alertMessageTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDeviceConfigByUserGroupResult>> GetDeviceConfigByUserGroupAsync(int? ConfigGroup, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ConfigGroup",
                    Value = ConfigGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDeviceConfigByUserGroupResult>("EXEC @returnValue = [dbo].[GetDeviceConfigByUserGroup] @ConfigGroup", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDeviceUsersByDeviceResult>> GetDeviceUsersByDeviceAsync(int? Device_UserGroup, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Device_UserGroup",
                    Value = Device_UserGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDeviceUsersByDeviceResult>("EXEC @returnValue = [dbo].[GetDeviceUsersByDevice] @Device_UserGroup", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<HashTransactionResult>> HashTransactionAsync(string TxString, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TxString",
                    Size = -1,
                    Value = TxString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<HashTransactionResult>("EXEC @returnValue = [dbo].[HashTransaction] @TxString", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
