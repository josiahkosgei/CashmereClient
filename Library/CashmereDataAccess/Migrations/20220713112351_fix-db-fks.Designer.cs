// <auto-generated />
using System;
using Cashmere.Library.CashmereDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cashmere.Library.CashmereDataAccess.Migrations
{
    [DbContext(typeof(DepositorDBContext))]
    [Migration("20220713112351_fix-db-fks")]
    partial class fixdbfks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertAttachmentType", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("code");

                    b.Property<int?>("AlertTypeId")
                        .HasColumnType("int")
                        .HasColumnName("alert_type_id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("MimeSubtype")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("mime_subtype");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Code");

                    b.ToTable("AlertAttachmentType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("AlertEventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("alert_event_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("From")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("from");

                    b.Property<string>("HtmlMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("html_message");

                    b.Property<string>("RawTextMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("raw_text_message");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("send_date");

                    b.Property<bool>("SendError")
                        .HasColumnType("bit")
                        .HasColumnName("send_error");

                    b.Property<string>("SendErrorMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("send_error_message");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit")
                        .HasColumnName("sent");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("subject");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("to");

                    b.HasKey("Id");

                    b.HasIndex("AlertEventId");

                    b.ToTable("AlertEmail");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEmailAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("AlertEmailId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("alert_email_id");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("data");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("binary(64)")
                        .HasColumnName("hash")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("path");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("type")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("AlertEmailAttachment");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("AlertEventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("alert_event_id");

                    b.Property<int>("AlertTypeId")
                        .HasColumnType("int")
                        .HasColumnName("alert_type_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateDetected")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_detected");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_resolved");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit")
                        .HasColumnName("is_processed");

                    b.Property<bool>("IsProcessing")
                        .HasColumnType("bit")
                        .HasColumnName("is_processing");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit")
                        .HasColumnName("is_resolved");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("machine_name");

                    b.HasKey("Id");

                    b.HasIndex("AlertEventId");

                    b.ToTable("AlertEvent");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertMessageRegistry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("AlertTypeId")
                        .HasColumnType("int")
                        .HasColumnName("alert_type_id");

                    b.Property<bool?>("EmailEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("email_enabled")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("PhoneEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("phone_enabled");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("AlertTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("AlertMessageRegistry");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertMessageType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("EmailContentTemplate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_content_template");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneContentTemplate")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("phone_content_template");

                    b.Property<string>("RawEmailContentTemplate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("raw_email_content_template");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("AlertMessageType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertSMS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("AlertEventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("alert_event_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("From")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("from");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("send_date");

                    b.Property<bool>("SendError")
                        .HasColumnType("bit")
                        .HasColumnName("send_error");

                    b.Property<string>("SendErrorMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("send_error_message");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit")
                        .HasColumnName("sent");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("to");

                    b.HasKey("Id");

                    b.HasIndex("AlertEventId");

                    b.ToTable("AlertSMS");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("additional_info");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("machine_name");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Stack")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("stack");

                    b.HasKey("Id");

                    b.ToTable("ApplicationException", "exp");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("component")
                        .HasComment("Which internal component produced the log entry e.g. GUI, APIs, DeviceController etc");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<string>("EventDetail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("event_detail")
                        .HasComment("the details of the log message");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("event_name")
                        .HasComment("The name of the log event");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("event_type")
                        .HasComment("the type of the log event used for grouping and sorting");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("log_date")
                        .HasComment("Datetime the system deems for the log entry.");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int")
                        .HasColumnName("log_level")
                        .HasComment("the LogLevel");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("machine_name");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("session_id")
                        .HasComment("The session this log entry belongs to");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLog");

                    b.HasComment("Stores the general application log that the GUI and other local systems write to");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("ApplicationUserLoginDetail")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DepositorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("depositor_enabled");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<bool?>("EmailEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("email_enabled")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fname");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdUser")
                        .HasColumnType("bit")
                        .HasColumnName("is_ad_user");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lname");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int")
                        .HasColumnName("login_attempts");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(71)
                        .IsUnicode(false)
                        .HasColumnType("char(71)")
                        .HasColumnName("password")
                        .IsFixedLength();

                    b.Property<bool>("PasswordResetRequired")
                        .HasColumnType("bit")
                        .HasColumnName("password_reset_required");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.Property<bool>("PhoneEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("phone_enabled");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<bool?>("UserDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserGroup")
                        .HasColumnType("int")
                        .HasColumnName("user_group");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserGroup");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bank_code");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("country_code")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bank_id");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("branch_code");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CIT", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("AuthUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("auth_user");

                    b.Property<DateTime?>("CITCompleteDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("cit_complete_date");

                    b.Property<DateTime>("CITDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("cit_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CITError")
                        .HasColumnType("int")
                        .HasColumnName("cit_error");

                    b.Property<string>("CITErrorMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("cit_error_message");

                    b.Property<bool>("Complete")
                        .HasColumnType("bit")
                        .HasColumnName("complete");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("fromDate");

                    b.Property<string>("NewBagNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("new_bag_number");

                    b.Property<string>("OldBagNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("old_bag_number");

                    b.Property<string>("SealNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("seal_number");

                    b.Property<Guid>("StartUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("start_user");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("toDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthUser");

                    b.HasIndex("DeviceId");

                    b.HasIndex("StartUser");

                    b.ToTable("CIT");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITDenomination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("CITId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cit_id");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("currency_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<int>("Denom")
                        .HasColumnType("int")
                        .HasColumnName("denom");

                    b.Property<long>("Subtotal")
                        .HasColumnType("bigint")
                        .HasColumnName("subtotal");

                    b.HasKey("Id");

                    b.HasIndex("CITId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CITDenomination");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITPrintout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("CITId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cit_id");

                    b.Property<DateTime>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsCopy")
                        .HasColumnType("bit")
                        .HasColumnName("is_copy");

                    b.Property<string>("PrintContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("print_content");

                    b.Property<Guid>("PrintGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("print_guid");

                    b.HasKey("Id");

                    b.HasIndex("CITId");

                    b.ToTable("CITPrintout");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account_number");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<Guid>("CITId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cit_id");

                    b.Property<DateTime?>("CbDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("cb_date");

                    b.Property<string>("CbStatusDetail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cb_status_detail");

                    b.Property<string>("CbTxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cb_tx_number");

                    b.Property<string>("CbTxStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cb_tx_status");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("currency")
                        .IsFixedLength();

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int")
                        .HasColumnName("error_code");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("error_message");

                    b.Property<string>("Narration")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("narration");

                    b.Property<string>("SuspenseAccount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("suspense_account");

                    b.HasKey("Id");

                    b.HasIndex("CITId");

                    b.ToTable("CITTransaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Config", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_id");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.HasKey("Name");

                    b.HasIndex("CategoryId");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ConfigCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ConfigCategory");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentGroup")
                        .HasColumnType("int")
                        .HasColumnName("parent_group");

                    b.HasKey("Id");

                    b.HasIndex("ParentGroup");

                    b.ToTable("ConfigGroup");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("country_code")
                        .HasDefaultValueSql("('')")
                        .IsFixedLength();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country_name")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CountryCode");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CrashEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("DateDetected")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_detected");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("machine_name");

                    b.HasKey("Id");

                    b.ToTable("CrashEvent", "exp");

                    b.HasComment("contains a crash report");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("flag")
                        .IsFixedLength();

                    b.Property<string>("Iso3NumericCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("ISO_3_Numeric_Code")
                        .IsFixedLength();

                    b.Property<int>("Minor")
                        .HasColumnType("int")
                        .HasColumnName("minor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Code");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CurrencyList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("default_currency")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("DefaultCurrency");

                    b.ToTable("CurrencyList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CurrencyListCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("CurrencyItem")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("currency_item")
                        .IsFixedLength();

                    b.Property<int>("CurrencyList")
                        .HasColumnType("int")
                        .HasColumnName("currency_list");

                    b.Property<int>("CurrencyOrder")
                        .HasColumnType("int")
                        .HasColumnName("currency_order");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int")
                        .HasColumnName("max_count");

                    b.Property<long>("MaxValue")
                        .HasColumnType("bigint")
                        .HasColumnName("max_value");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyItem");

                    b.HasIndex("CurrencyList");

                    b.ToTable("CurrencyListCurrency");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DenominationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<int>("Denom")
                        .HasColumnType("int")
                        .HasColumnName("denom");

                    b.Property<long>("Subtotal")
                        .HasColumnType("bigint")
                        .HasColumnName("subtotal");

                    b.Property<Guid>("TxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tx_id");

                    b.HasKey("Id");

                    b.HasIndex("TxId");

                    b.ToTable("DenominationDetail");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DepositorSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool>("AccountVerified")
                        .HasColumnType("bit")
                        .HasColumnName("account_verified");

                    b.Property<bool>("Complete")
                        .HasColumnType("bit")
                        .HasColumnName("complete");

                    b.Property<bool>("CompleteSuccess")
                        .HasColumnType("bit")
                        .HasColumnName("complete_success");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("int")
                        .HasColumnName("error_code");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("error_message");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("language_code")
                        .IsFixedLength();

                    b.Property<bool>("ReferenceAccountVerified")
                        .HasColumnType("bit")
                        .HasColumnName("reference_account_verified");

                    b.Property<string>("Salt")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("SessionEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("session_end");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("session_start");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("bit")
                        .HasColumnName("terms_accepted");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("DepositorSession");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("app_id");

                    b.Property<byte[]>("AppKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)")
                        .HasColumnName("app_key")
                        .IsFixedLength();

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("branch_id");

                    b.Property<int>("ConfigGroup")
                        .HasColumnType("int")
                        .HasColumnName("config_group");

                    b.Property<int>("CurrencyList")
                        .HasColumnType("int")
                        .HasColumnName("currency_list");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("device_location");

                    b.Property<string>("DeviceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("device_number");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<int>("GUIScreenList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GUIScreen_list")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("LanguageList")
                        .HasColumnType("int")
                        .HasColumnName("language_list");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int")
                        .HasColumnName("login_attempts");

                    b.Property<int>("LoginCycles")
                        .HasColumnType("int")
                        .HasColumnName("login_cycles");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("char(17)")
                        .HasColumnName("mac_address")
                        .IsFixedLength();

                    b.Property<string>("MachineName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("machine_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("TransactionTypeList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_type_list")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<int?>("UserGroup")
                        .HasColumnType("int")
                        .HasColumnName("user_group");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ConfigGroup");

                    b.HasIndex("CurrencyList");

                    b.HasIndex("GUIScreenList");

                    b.HasIndex("LanguageList");

                    b.HasIndex("TransactionTypeList");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserGroup");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceCITSuspenseAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account_number");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("currency_code")
                        .IsFixedLength();

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceCITSuspenseAccount");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("ConfigId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("config_id");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("config_value");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("GroupId");

                    b.ToTable("DeviceConfig");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceLock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("LockDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("lock_date");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit")
                        .HasColumnName("locked");

                    b.Property<bool>("LockedByDevice")
                        .HasColumnType("bit")
                        .HasColumnName("locked_by_device");

                    b.Property<Guid?>("LockingUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("locking_user");

                    b.Property<string>("WebLockingUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("web_locking_user");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("LockingUser");

                    b.ToTable("DeviceLock");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool?>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<bool?>("DepositorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<bool?>("ForcedLogout")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("User");

                    b.ToTable("DeviceLogin");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DevicePrinter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<bool?>("IsInfront")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_infront")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Make")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("port");

                    b.Property<string>("Serial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("serial");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DevicePrinter");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("BaCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("ba_currency")
                        .IsFixedLength();

                    b.Property<string>("BaStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ba_status");

                    b.Property<string>("BaType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ba_type");

                    b.Property<string>("BagNoteCapacity")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("bag_note_capacity")
                        .IsFixedLength();

                    b.Property<int>("BagNoteLevel")
                        .HasColumnType("int")
                        .HasColumnName("bag_note_level");

                    b.Property<string>("BagNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bag_number");

                    b.Property<int>("BagPercentFull")
                        .HasColumnType("int")
                        .HasColumnName("bag_percent_full");

                    b.Property<string>("BagStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("bag_status");

                    b.Property<long?>("BagValueCapacity")
                        .HasColumnType("bigint")
                        .HasColumnName("bag_value_capacity");

                    b.Property<long?>("BagValueLevel")
                        .HasColumnType("bigint")
                        .HasColumnName("bag_value_level");

                    b.Property<string>("ControllerState")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("controller_state");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int")
                        .HasColumnName("current_status");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<string>("EscrowPosition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("escrow_position");

                    b.Property<string>("EscrowStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("escrow_status");

                    b.Property<string>("EscrowType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("escrow_type");

                    b.Property<DateTime?>("MachineDatetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("machine_datetime");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("machine_name");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified");

                    b.Property<string>("SensorsBag")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("sensors_bag");

                    b.Property<string>("SensorsDoor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("sensors_door");

                    b.Property<string>("SensorsStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("sensors_status");

                    b.Property<string>("SensorsType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("sensors_type");

                    b.Property<int>("SensorsValue")
                        .HasColumnType("int")
                        .HasColumnName("sensors_value");

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("transaction_status");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("transaction_type");

                    b.HasKey("Id");

                    b.ToTable("DeviceStatus");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceSuspenseAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account_number");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("currency_code")
                        .IsFixedLength();

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceSuspenseAccount");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CoinEscrow")
                        .HasColumnType("bit")
                        .HasColumnName("coin_escrow");

                    b.Property<bool>("CoinIn")
                        .HasColumnType("bit")
                        .HasColumnName("coin_in");

                    b.Property<bool>("CoinOut")
                        .HasColumnType("bit")
                        .HasColumnName("coin_out");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<bool>("NoteEscrow")
                        .HasColumnType("bit")
                        .HasColumnName("note_escrow");

                    b.Property<bool>("NoteIn")
                        .HasColumnType("bit")
                        .HasColumnName("note_in");

                    b.Property<bool>("NoteOut")
                        .HasColumnType("bit")
                        .HasColumnName("note_out");

                    b.HasKey("Id");

                    b.ToTable("DeviceType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.EscrowJam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("AuthorisingUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("authorising_user");

                    b.Property<DateTime>("DateDetected")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_detected");

                    b.Property<long>("DroppedAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("dropped_amount");

                    b.Property<long>("EscrowAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("escrow_amount");

                    b.Property<Guid?>("InitialisingUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("initialising_user");

                    b.Property<long>("PostedAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("posted_amount");

                    b.Property<DateTime?>("RecoveryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("recovery_date");

                    b.Property<long>("RetreivedAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("retreived_amount");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorisingUser");

                    b.HasIndex("InitialisingUser");

                    b.HasIndex("TransactionId");

                    b.ToTable("EscrowJam", "exp");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GetCITDenominationByDatesResult", b =>
                {
                    b.Property<long?>("count")
                        .HasColumnType("bigint");

                    b.Property<int>("denom")
                        .HasColumnType("int");

                    b.Property<long?>("subtotal")
                        .HasColumnType("bigint");

                    b.Property<string>("tx_currency")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GetDestinationEmailsByAlertTypeResult", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GetDeviceConfigByUserGroupResult", b =>
                {
                    b.Property<string>("config_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("config_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("group_id")
                        .HasColumnType("int");

                    b.Property<Guid>("id")
                        .HasColumnType("uniqueidentifier");

                    b.ToView(null);
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GetDeviceUsersByDeviceResult", b =>
                {
                    b.Property<Guid?>("ApplicationUserLoginDetail")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("UserDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("depositor_enabled")
                        .HasColumnType("bit");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("email_enabled")
                        .HasColumnType("bit");

                    b.Property<string>("fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("is_ad_user")
                        .HasColumnType("bit");

                    b.Property<string>("lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("login_attempts")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("password_reset_required")
                        .HasColumnType("bit");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("phone_enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("role_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("user_group")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIPrepopItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("Value")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("GUIPrepopItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIPrepopList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool>("AllowFreeText")
                        .HasColumnType("bit");

                    b.Property<int>("DefaultIndex")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<bool?>("UseDefault")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.ToTable("GUIPrepopList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIPrepopListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("Item")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("List")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int")
                        .HasColumnName("List_Order");

                    b.HasKey("Id");

                    b.HasIndex("Item");

                    b.HasIndex("List");

                    b.ToTable("GUIPrepopListItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIScreen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<Guid?>("GuiText")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gui_text");

                    b.Property<string>("InputMask")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("input_mask");

                    b.Property<bool?>("IsMasked")
                        .HasColumnType("bit")
                        .HasColumnName("is_masked");

                    b.Property<int?>("Keyboard")
                        .HasColumnType("int")
                        .HasColumnName("keyboard");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PrefillText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prefill_text");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("GuiText");

                    b.HasIndex("Type");

                    b.ToTable("GUIScreen");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("GUIScreenList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenListScreen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<Guid?>("GUIPrepoplistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guiprepoplist_id");

                    b.Property<int>("GuiScreenList")
                        .HasColumnType("int")
                        .HasColumnName("gui_screen_list");

                    b.Property<bool>("Required")
                        .HasColumnType("bit")
                        .HasColumnName("required");

                    b.Property<int>("Screen")
                        .HasColumnType("int")
                        .HasColumnName("screen");

                    b.Property<int>("ScreenOrder")
                        .HasColumnType("int")
                        .HasColumnName("screen_order");

                    b.Property<Guid?>("ValidationListId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("validation_list_id");

                    b.HasKey("Id");

                    b.HasIndex("GUIPrepoplistId");

                    b.HasIndex("GuiScreenList");

                    b.HasIndex("Screen");

                    b.HasIndex("ValidationListId");

                    b.ToTable("GuiScreenListScreen");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("BtnAcceptCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("btn_accept_caption");

                    b.Property<Guid?>("BtnBackCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("btn_back_caption");

                    b.Property<Guid?>("BtnCancelCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("btn_cancel_caption");

                    b.Property<Guid?>("FullInstructions")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("full_instructions");

                    b.Property<int>("GUIScreenId")
                        .HasColumnType("int")
                        .HasColumnName("guiscreen_id");

                    b.Property<Guid>("ScreenTitle")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("screen_title");

                    b.Property<Guid?>("ScreenTitleInstruction")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("screen_title_instruction");

                    b.HasKey("Id");

                    b.HasIndex("BtnAcceptCaption");

                    b.HasIndex("BtnBackCaption");

                    b.HasIndex("BtnCancelCaption");

                    b.HasIndex("FullInstructions");

                    b.HasIndex("GUIScreenId")
                        .IsUnique();

                    b.HasIndex("ScreenTitle");

                    b.HasIndex("ScreenTitleInstruction");

                    b.ToTable("GUIScreenText");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("GUIScreenType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Code")
                        .HasName("PK_Languages");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.LanguageList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DefaultLanguage")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("default_language")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("DefaultLanguage");

                    b.ToTable("LanguageList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.LanguageListLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("LanguageItem")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("language_item")
                        .IsFixedLength();

                    b.Property<int>("LanguageList")
                        .HasColumnType("int")
                        .HasColumnName("language_list");

                    b.Property<int>("LanguageOrder")
                        .HasColumnType("int")
                        .HasColumnName("language_order");

                    b.HasKey("Id");

                    b.HasIndex("LanguageItem");

                    b.HasIndex("LanguageList");

                    b.ToTable("LanguageListLanguage");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PasswordHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .HasMaxLength(71)
                        .HasColumnType("nvarchar(71)");

                    b.Property<Guid?>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.ToTable("PasswordHistory");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PasswordPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AllowedSpecial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("allowed_special");

                    b.Property<int>("ExpiryDays")
                        .HasColumnType("int")
                        .HasColumnName("expiry_days");

                    b.Property<int>("HistorySize")
                        .HasColumnType("int")
                        .HasColumnName("history_size");

                    b.Property<int>("MinDigits")
                        .HasColumnType("int")
                        .HasColumnName("min_digits");

                    b.Property<int>("MinLength")
                        .HasColumnType("int")
                        .HasColumnName("min_length");

                    b.Property<int>("MinLowercase")
                        .HasColumnType("int")
                        .HasColumnName("min_lowercase");

                    b.Property<int>("MinSpecial")
                        .HasColumnType("int")
                        .HasColumnName("min_special");

                    b.Property<int>("MinUppercase")
                        .HasColumnType("int")
                        .HasColumnName("min_uppercase");

                    b.Property<bool?>("UseHistory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("use_history")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.ToTable("PasswordPolicy");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("activity_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<bool>("StandaloneAllowed")
                        .HasColumnType("bit")
                        .HasColumnName("standalone_allowed");

                    b.Property<bool>("StandaloneAuthenticationRequired")
                        .HasColumnType("bit")
                        .HasColumnName("standalone_authentication_required");

                    b.Property<bool>("StandaloneCanAuthenticate")
                        .HasColumnType("bit")
                        .HasColumnName("standalone_can_Authenticate");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PrinterStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool>("CoverOpen")
                        .HasColumnType("bit")
                        .HasColumnName("cover_open");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int")
                        .HasColumnName("error_code");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("error_message");

                    b.Property<string>("ErrorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("error_name");

                    b.Property<bool>("HasPaper")
                        .HasColumnType("bit")
                        .HasColumnName("has_paper");

                    b.Property<bool>("IsError")
                        .HasColumnType("bit")
                        .HasColumnName("is_error");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("machine_name");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("PrinterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("printer_id");

                    b.HasKey("Id");

                    b.ToTable("PrinterStatus");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Printout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsCopy")
                        .HasColumnType("bit")
                        .HasColumnName("is_copy");

                    b.Property<string>("PrintContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("print_content");

                    b.Property<Guid>("PrintGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("print_guid");

                    b.Property<Guid>("TxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tx_id");

                    b.HasKey("Id");

                    b.HasIndex("TxId");

                    b.ToTable("Printout");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SessionException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("additional_info");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("machine_name");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("session_id");

                    b.Property<string>("Stack")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("stack");

                    b.HasKey("Id");

                    b.ToTable("SessionException", "exp");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("Category")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultTranslation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TextItemTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TextItemTypeID");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("TextItemTypeId");

                    b.ToTable("SysTextItem", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Parent");

                    b.ToTable("SysTextItemCategory", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("SysTextItemType", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<Guid>("SysTextItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SysTextItemID");

                    b.Property<string>("TranslationSysText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("SysTextItemId");

                    b.ToTable("SysTextTranslation", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("Category")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultTranslation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TextItemTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TextItemTypeID");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("TextItemTypeId");

                    b.ToTable("TextItem", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Parent");

                    b.ToTable("TextItemCategory", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("TextItemType", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<Guid>("TextItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TextItemID");

                    b.Property<string>("TranslationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("TextItemId");

                    b.ToTable("TextTranslation", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ThisDevice", b =>
                {
                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("branch_id");

                    b.Property<int>("ConfigGroup")
                        .HasColumnType("int")
                        .HasColumnName("config_group");

                    b.Property<int>("CurrencyList")
                        .HasColumnType("int")
                        .HasColumnName("currency_list");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("device_location");

                    b.Property<string>("DeviceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("device_number");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<int>("GUIScreenList")
                        .HasColumnType("int")
                        .HasColumnName("GUIScreen_list");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int?>("LanguageList")
                        .HasColumnType("int")
                        .HasColumnName("language_list");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int")
                        .HasColumnName("login_attempts");

                    b.Property<int>("LoginCycles")
                        .HasColumnType("int")
                        .HasColumnName("login_cycles");

                    b.Property<string>("MachineName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("machine_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("TransactionTypeList")
                        .HasColumnType("int")
                        .HasColumnName("transaction_type_list");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<int?>("UserGroup")
                        .HasColumnType("int")
                        .HasColumnName("user_group");

                    b.ToTable("ThisDevice");

                    b.ToView("ThisDevice");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("AuthUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("auth_user");

                    b.Property<Guid?>("CITId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cit_id");

                    b.Property<string>("CbAccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cb_account_name");

                    b.Property<DateTime?>("CbDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("cb_date");

                    b.Property<string>("CbRefAccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cb_ref_account_name");

                    b.Property<string>("CbStatusDetail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cb_status_detail");

                    b.Property<string>("CbTxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cb_tx_number");

                    b.Property<string>("CbTxStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cb_tx_status");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device_id");

                    b.Property<bool>("EscrowJam")
                        .HasColumnType("bit")
                        .HasColumnName("escrow_jam");

                    b.Property<string>("FundsSource")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("funds_source");

                    b.Property<Guid?>("InitUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("init_user");

                    b.Property<bool>("JamDetected")
                        .HasColumnType("bit")
                        .HasColumnName("jam_detected");

                    b.Property<bool>("NotesRejected")
                        .HasColumnType("bit")
                        .HasColumnName("notes_rejected");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("session_id");

                    b.Property<string>("TxAccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tx_account_number");

                    b.Property<long?>("TxAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("tx_amount");

                    b.Property<bool>("TxCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("tx_completed");

                    b.Property<string>("TxCurrency")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("tx_currency")
                        .IsFixedLength();

                    b.Property<string>("TxDepositorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tx_depositor_name");

                    b.Property<DateTime?>("TxEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("tx_end_date");

                    b.Property<int>("TxErrorCode")
                        .HasColumnType("int")
                        .HasColumnName("tx_error_code");

                    b.Property<string>("TxErrorMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("tx_error_message");

                    b.Property<string>("TxIdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tx_id_number");

                    b.Property<string>("TxNarration")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tx_narration");

                    b.Property<string>("TxPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tx_phone");

                    b.Property<int?>("TxRandomNumber")
                        .HasColumnType("int")
                        .HasColumnName("tx_random_number");

                    b.Property<string>("TxRefAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tx_ref_account");

                    b.Property<int>("TxResult")
                        .HasColumnType("int")
                        .HasColumnName("tx_result");

                    b.Property<DateTime>("TxStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("tx_start_date");

                    b.Property<string>("TxSuspenseAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tx_suspense_account");

                    b.Property<int?>("TxType")
                        .HasColumnType("int")
                        .HasColumnName("tx_type");

                    b.HasKey("Id");

                    b.HasIndex("AuthUser");

                    b.HasIndex("CITId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("InitUser");

                    b.HasIndex("SessionId");

                    b.HasIndex("TxCurrency");

                    b.HasIndex("TxType");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("additional_info");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("machine_name");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("message");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.ToTable("TransactionException", "exp");

                    b.HasComment("Exceptions encountered during execution");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("TransactionLimitList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("currency_code")
                        .IsFixedLength();

                    b.Property<long>("FundsSourceAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("funds_source_amount");

                    b.Property<int>("OvercountAmount")
                        .HasColumnType("int")
                        .HasColumnName("overcount_amount");

                    b.Property<long>("OverdepositAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("overdeposit_amount");

                    b.Property<bool>("PreventOvercount")
                        .HasColumnType("bit")
                        .HasColumnName("prevent_overcount");

                    b.Property<bool>("PreventOverdeposit")
                        .HasColumnType("bit")
                        .HasColumnName("prevent_overdeposit");

                    b.Property<bool?>("PreventUnderdeposit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("prevent_underdeposit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("ShowFundsForm")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("show_funds_form");

                    b.Property<bool>("ShowFundsSource")
                        .HasColumnType("bit")
                        .HasColumnName("show_funds_source");

                    b.Property<Guid>("TransactionitemlistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transactionitemlist_id");

                    b.Property<long>("UnderdepositAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("underdeposit_amount");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("TransactionitemlistId");

                    b.ToTable("TransactionLimitListItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("AccountNameCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_name_caption");

                    b.Property<Guid?>("AccountNumberCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_number_caption");

                    b.Property<Guid?>("AliasAccountNameCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("alias_account_name_caption");

                    b.Property<Guid?>("AliasAccountNumberCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("alias_account_number_caption");

                    b.Property<Guid?>("DepositorNameCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("depositor_name_caption");

                    b.Property<Guid?>("Disclaimer")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("disclaimer");

                    b.Property<Guid?>("FullInstructions")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("full_instructions");

                    b.Property<Guid?>("FundsSourceCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FundsSource_caption");

                    b.Property<Guid?>("IdNumberCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_number_caption");

                    b.Property<Guid?>("ListItemCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("listItem_caption");

                    b.Property<Guid?>("NarrationCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("narration_caption");

                    b.Property<Guid?>("PhoneNumberCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("phone_number_caption");

                    b.Property<Guid?>("ReceiptTemplate")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("receipt_template");

                    b.Property<Guid?>("ReferenceAccountNameCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reference_account_name_caption");

                    b.Property<Guid?>("ReferenceAccountNumberCaption")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reference_account_number_caption");

                    b.Property<Guid?>("Terms")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("terms");

                    b.Property<int>("TxItem")
                        .HasColumnType("int")
                        .HasColumnName("tx_item");

                    b.Property<Guid?>("ValidationTextErrorMessage")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("validation_text_error_message");

                    b.Property<Guid?>("ValidationTextSuccessMessage")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("validation_text_success_message");

                    b.HasKey("Id");

                    b.HasIndex("AccountNameCaption");

                    b.HasIndex("AccountNumberCaption");

                    b.HasIndex("AliasAccountNameCaption");

                    b.HasIndex("AliasAccountNumberCaption");

                    b.HasIndex("DepositorNameCaption");

                    b.HasIndex("Disclaimer");

                    b.HasIndex("FullInstructions");

                    b.HasIndex("FundsSourceCaption");

                    b.HasIndex("IdNumberCaption");

                    b.HasIndex("ListItemCaption");

                    b.HasIndex("NarrationCaption");

                    b.HasIndex("PhoneNumberCaption");

                    b.HasIndex("ReceiptTemplate");

                    b.HasIndex("ReferenceAccountNameCaption");

                    b.HasIndex("ReferenceAccountNumberCaption");

                    b.HasIndex("Terms");

                    b.HasIndex("TxItem")
                        .IsUnique();

                    b.HasIndex("ValidationTextErrorMessage");

                    b.HasIndex("ValidationTextSuccessMessage");

                    b.ToTable("TransactionText");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypeList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountPermission")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_permission");

                    b.Property<bool>("AuthUserRequired")
                        .HasColumnType("bit")
                        .HasColumnName("auth_user_required");

                    b.Property<string>("CbTxType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cb_tx_type");

                    b.Property<string>("DefaultAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("default_account");

                    b.Property<string>("DefaultAccountCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("default_account_currency")
                        .HasDefaultValueSql("('KES')")
                        .IsFixedLength();

                    b.Property<string>("DefaultAccountName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("default_account_name");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("InitUserRequired")
                        .HasColumnType("bit")
                        .HasColumnName("init_user_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<Guid?>("TxLimitList")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tx_limit_list");

                    b.Property<Guid?>("TxText")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tx_text");

                    b.Property<int>("TxType")
                        .HasColumnType("int")
                        .HasColumnName("tx_type");

                    b.Property<int>("TxTypeGUIScreenlist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tx_type_guiscreenlist")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.Property<bool>("ValidateDefaultAccount")
                        .HasColumnType("bit")
                        .HasColumnName("validate_default_account");

                    b.Property<bool>("ValidateReferenceAccount")
                        .HasColumnType("bit")
                        .HasColumnName("validate_reference_account");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAccountCurrency");

                    b.HasIndex("TxLimitList");

                    b.HasIndex("TxText");

                    b.HasIndex("TxType");

                    b.HasIndex("TxTypeGUIScreenlist");

                    b.ToTable("TransactionTypeListItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListTransactionTypeListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int")
                        .HasColumnName("list_order");

                    b.Property<int>("TxtypeList")
                        .HasColumnType("int")
                        .HasColumnName("txtype_list");

                    b.Property<int>("TxtypeListItem")
                        .HasColumnType("int")
                        .HasColumnName("txtype_list_item");

                    b.HasKey("Id");

                    b.HasIndex("TxtypeList");

                    b.HasIndex("TxtypeListItem");

                    b.ToTable("TransactionTypeListTransactionTypeListItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UptimeComponentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("ComponentState")
                        .HasColumnType("int")
                        .HasColumnName("component_state");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Device")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("UptimeComponentState");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UptimeMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Device")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("device");

                    b.Property<int>("DeviceMode")
                        .HasColumnType("int")
                        .HasColumnName("device_mode");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("UptimeMode");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentGroup")
                        .HasColumnType("int")
                        .HasColumnName("parent_group");

                    b.HasKey("Id");

                    b.HasIndex("ParentGroup");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UserLock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("ApplicationUserLoginDetail")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InitiatingUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LockType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("WebPortalInitiated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InitiatingUser");

                    b.ToTable("UserLock");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Category")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("int")
                        .HasColumnName("error_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("type_id");

                    b.Property<Guid?>("ValidationTextId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("validation_text_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("ValidationTextId");

                    b.ToTable("ValidationItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationItemValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<Guid>("ValidationItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("validation_item_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ValidationItemId");

                    b.ToTable("ValidationItemValue");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Category")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ValidationList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationListValidationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<Guid>("ValidationItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("validation_item_id");

                    b.Property<Guid>("ValidationListId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("validation_list_id");

                    b.HasKey("Id");

                    b.HasIndex("ValidationItemId");

                    b.HasIndex("ValidationListId");

                    b.ToTable("ValidationListValidationItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("ErrorMessage")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("error_message");

                    b.Property<Guid?>("SuccessMessage")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("success_message");

                    b.Property<Guid>("ValidationItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("validation_item_id");

                    b.HasKey("Id");

                    b.HasIndex("ErrorMessage");

                    b.HasIndex("SuccessMessage");

                    b.HasIndex("ValidationItemId");

                    b.ToTable("ValidationText");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ValidationType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEmail", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.AlertEvent", "AlertEvent")
                        .WithMany("AlertEmails")
                        .HasForeignKey("AlertEventId")
                        .IsRequired()
                        .HasConstraintName("FK_AlertEmail_AlertEmailEvent");

                    b.Navigation("AlertEvent");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEvent", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.AlertEvent", "AlertEventNavigation")
                        .WithMany("InverseAlertEventNavigation")
                        .HasForeignKey("AlertEventId")
                        .HasConstraintName("FK_AlertEmailEvent_AlertEmailEvent");

                    b.Navigation("AlertEventNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertMessageRegistry", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.AlertMessageType", "AlertType")
                        .WithMany("AlertMessageRegistries")
                        .HasForeignKey("AlertTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_AlertMessageRegistry_AlertMessageType");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Role", "Role")
                        .WithMany("AlertMessageRegistries")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AlertMessageRegistry_Role");

                    b.Navigation("AlertType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertSMS", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.AlertEvent", "AlertEvent")
                        .WithMany("AlertSMS")
                        .HasForeignKey("AlertEventId")
                        .IsRequired()
                        .HasConstraintName("FK_AlertSMS_AlertEvent");

                    b.Navigation("AlertEvent");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Role", "Role")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUser_Role");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", "UserGroupNavigation")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("UserGroup")
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUser_UserGroup");

                    b.Navigation("Role");

                    b.Navigation("UserGroupNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Bank", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Country", "CountryCodeNavigation")
                        .WithMany("Banks")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK_Bank_Country");

                    b.Navigation("CountryCodeNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Branch", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Bank", "Bank")
                        .WithMany("Branches")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Branch_Bank");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CIT", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "AuthUserNavigation")
                        .WithMany("CITAuthUsers")
                        .HasForeignKey("AuthUser")
                        .HasConstraintName("FK_CIT_ApplicationUser_AuthUser");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("CITs")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_CIT_DeviceList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "StartUserNavigation")
                        .WithMany("CITStartUsers")
                        .HasForeignKey("StartUser")
                        .IsRequired()
                        .HasConstraintName("FK_CIT_ApplicationUser_StartUser");

                    b.Navigation("AuthUserNavigation");

                    b.Navigation("Device");

                    b.Navigation("StartUserNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITDenomination", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CIT", "CIT")
                        .WithMany("CITDenominations")
                        .HasForeignKey("CITId")
                        .IsRequired()
                        .HasConstraintName("FK_CITDenominations_CIT");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "Currency")
                        .WithMany("CITDenominations")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_CITDenominations_Currency");

                    b.Navigation("CIT");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITPrintout", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CIT", "CIT")
                        .WithMany("CITPrintouts")
                        .HasForeignKey("CITId")
                        .IsRequired()
                        .HasConstraintName("FK_CITPrintout_CIT");

                    b.Navigation("CIT");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITTransaction", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CIT", "CIT")
                        .WithMany("CITTransactions")
                        .HasForeignKey("CITId")
                        .IsRequired()
                        .HasConstraintName("FK_CITTransaction_CIT");

                    b.Navigation("CIT");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Config", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ConfigCategory", "Category")
                        .WithMany("Configs")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Config_ConfigCategory");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", "ParentGroupNavigation")
                        .WithMany("InverseParentGroupNavigation")
                        .HasForeignKey("ParentGroup")
                        .HasConstraintName("FK_ConfigGroup_ConfigGroup");

                    b.Navigation("ParentGroupNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CurrencyList", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "DefaultCurrencyNavigation")
                        .WithMany("CurrencyLists")
                        .HasForeignKey("DefaultCurrency")
                        .IsRequired()
                        .HasConstraintName("FK_CurrencyList_Currency");

                    b.Navigation("DefaultCurrencyNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CurrencyListCurrency", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "CurrencyItemNavigation")
                        .WithMany("CurrencyListCurrencies")
                        .HasForeignKey("CurrencyItem")
                        .IsRequired()
                        .HasConstraintName("FK_Currency_CurrencyList_Currency");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CurrencyList", "CurrencyListNavigation")
                        .WithMany("CurrencyListCurrencies")
                        .HasForeignKey("CurrencyList")
                        .IsRequired()
                        .HasConstraintName("FK_Currency_CurrencyList_CurrencyList");

                    b.Navigation("CurrencyItemNavigation");

                    b.Navigation("CurrencyListNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DenominationDetail", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Transaction", "Tx")
                        .WithMany("DenominationDetails")
                        .HasForeignKey("TxId")
                        .IsRequired()
                        .HasConstraintName("FK_DenominationDetail_Transaction");

                    b.Navigation("Tx");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DepositorSession", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DepositorSessions")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DepositorSession_DeviceList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Language", "LanguageCodeNavigation")
                        .WithMany("DepositorSessions")
                        .HasForeignKey("LanguageCode")
                        .HasConstraintName("FK_DepositorSession_Language");

                    b.Navigation("Device");

                    b.Navigation("LanguageCodeNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Device", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Branch", "Branch")
                        .WithMany("Devices")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_Branch");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", "ConfigGroupNavigation")
                        .WithMany("Devices")
                        .HasForeignKey("ConfigGroup")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_ConfigGroup");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CurrencyList", "CurrencyListNavigation")
                        .WithMany("Devices")
                        .HasForeignKey("CurrencyList")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_CurrencyList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenList", "GUIScreenListNavigation")
                        .WithMany("Devices")
                        .HasForeignKey("GUIScreenList")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_GUIScreenList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.LanguageList", "LanguageListNavigation")
                        .WithMany("Devices")
                        .HasForeignKey("LanguageList")
                        .HasConstraintName("FK_Device_LanguageList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeList", "TransactionTypeListNavigation")
                        .WithMany("Devices")
                        .HasForeignKey("TransactionTypeList")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_TransactionTypeList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.DeviceType", "Type")
                        .WithMany("Devices")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_DeviceType");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", "UserGroupNavigation")
                        .WithMany("Devices")
                        .HasForeignKey("UserGroup")
                        .HasConstraintName("FK_DeviceList_UserGroup");

                    b.Navigation("Branch");

                    b.Navigation("ConfigGroupNavigation");

                    b.Navigation("CurrencyListNavigation");

                    b.Navigation("GUIScreenListNavigation");

                    b.Navigation("LanguageListNavigation");

                    b.Navigation("TransactionTypeListNavigation");

                    b.Navigation("Type");

                    b.Navigation("UserGroupNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceCITSuspenseAccount", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "CurrencyCodeNavigation")
                        .WithMany("DeviceCITSuspenseAccounts")
                        .HasForeignKey("CurrencyCode")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceCITSuspenseAccount_Currency");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DeviceCITSuspenseAccounts")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceCITSuspenseAccount_Device");

                    b.Navigation("CurrencyCodeNavigation");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceConfig", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Config", "Config")
                        .WithMany("DeviceConfigs")
                        .HasForeignKey("ConfigId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceConfig_Config");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", "Group")
                        .WithMany("DeviceConfigs")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceConfig_ConfigGroup");

                    b.Navigation("Config");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceLock", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DeviceLocks")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceLock_Device");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "LockingUserNavigation")
                        .WithMany("DeviceLocks")
                        .HasForeignKey("LockingUser");

                    b.Navigation("Device");

                    b.Navigation("LockingUserNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceLogin", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DeviceLogins")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceLogin_Device");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "UserNavigation")
                        .WithMany("DeviceLogins")
                        .HasForeignKey("User")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceLogin_ApplicationUser");

                    b.Navigation("Device");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DevicePrinter", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DevicePrinters")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DevicePrinter_DeviceList");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceSuspenseAccount", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "CurrencyCodeNavigation")
                        .WithMany("DeviceSuspenseAccounts")
                        .HasForeignKey("CurrencyCode")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceSuspenseAccount_Currency");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DeviceSuspenseAccounts")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceSuspenseAccount_DeviceList");

                    b.Navigation("CurrencyCodeNavigation");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.EscrowJam", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "AuthorisingUserNavigation")
                        .WithMany("EscrowJamAuthorisingUsers")
                        .HasForeignKey("AuthorisingUser")
                        .HasConstraintName("FK_EscrowJam_AppUser_Approver");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "InitialisingUserNavigation")
                        .WithMany("EscrowJamInitialisingUsers")
                        .HasForeignKey("InitialisingUser")
                        .HasConstraintName("FK_EscrowJam_AppUser_Initiator");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Transaction", "Transaction")
                        .WithMany("EscrowJams")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_EscrowJam_Transaction");

                    b.Navigation("AuthorisingUserNavigation");

                    b.Navigation("InitialisingUserNavigation");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIPrepopItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ValueNavigation")
                        .WithMany("GUIPrepopItems")
                        .HasForeignKey("Value")
                        .IsRequired()
                        .HasConstraintName("FK_GUIPrepopItem_TextItem");

                    b.Navigation("ValueNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIPrepopListItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GUIPrepopItem", "GUIPrepopItem")
                        .WithMany("GUIPrepopListItems")
                        .HasForeignKey("Item")
                        .IsRequired()
                        .HasConstraintName("FK_GUIPrepopList_Item_GUIPrepopItem");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GUIPrepopList", "ListNavigation")
                        .WithMany("GUIPrepopListItems")
                        .HasForeignKey("List")
                        .IsRequired()
                        .HasConstraintName("FK_GUIPrepopList_Item_GUIPrepopList");

                    b.Navigation("GUIPrepopItem");

                    b.Navigation("ListNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIScreen", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenText", "GuiTextNavigation")
                        .WithMany("GUIScreens")
                        .HasForeignKey("GuiText")
                        .HasConstraintName("FK_GUIScreen_GUIScreenText");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenType", "GUIScreenType")
                        .WithMany("GUIScreens")
                        .HasForeignKey("Type")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreen_GUIScreenType");

                    b.Navigation("GUIScreenType");

                    b.Navigation("GuiTextNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenListScreen", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GUIPrepopList", "GUIPrepopList")
                        .WithMany("GuiScreenListScreens")
                        .HasForeignKey("GUIPrepoplistId")
                        .HasConstraintName("FK_GuiScreenList_Screen_GUIPrepopList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenList", "GuiScreenListNavigation")
                        .WithMany("GuiScreenListScreens")
                        .HasForeignKey("GuiScreenList")
                        .IsRequired()
                        .HasConstraintName("FK_GuiScreenList_Screen_GUIScreenList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GUIScreen", "ScreenNavigation")
                        .WithMany("GuiScreenListScreens")
                        .HasForeignKey("Screen")
                        .IsRequired()
                        .HasConstraintName("FK_GuiScreenList_Screen_GUIScreen");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationList", "ValidationList")
                        .WithMany("GuiScreenListScreens")
                        .HasForeignKey("ValidationListId")
                        .HasConstraintName("FK_GuiScreenList_Screen_ValidationList");

                    b.Navigation("GUIPrepopList");

                    b.Navigation("GuiScreenListNavigation");

                    b.Navigation("ScreenNavigation");

                    b.Navigation("ValidationList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenText", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "BtnAcceptCaptionNavigation")
                        .WithMany("GUIScreenTextBtnAcceptCaptions")
                        .HasForeignKey("BtnAcceptCaption")
                        .HasConstraintName("FK_GUIScreenText_btn_accept_caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "BtnBackCaptionNavigation")
                        .WithMany("GUIScreenTextBtnBackCaptions")
                        .HasForeignKey("BtnBackCaption")
                        .HasConstraintName("FK_GUIScreenText_btn_back_caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "BtnCancelCaptionNavigation")
                        .WithMany("GUIScreenTextBtnCancelCaptions")
                        .HasForeignKey("BtnCancelCaption")
                        .HasConstraintName("FK_GUIScreenText_btn_cancel_caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "FullInstructionsNavigation")
                        .WithMany("GUIScreenTextFullInstructionss")
                        .HasForeignKey("FullInstructions")
                        .HasConstraintName("FK_GUIScreenText_full_instructions");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GUIScreen", "GUIScreen")
                        .WithOne("GUIScreenText")
                        .HasForeignKey("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenText", "GUIScreenId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreenText_GUIScreen");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ScreenTitleNavigation")
                        .WithMany("GUIScreenTextScreenTitles")
                        .HasForeignKey("ScreenTitle")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreenText_screen_title");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ScreenTitleInstructionNavigation")
                        .WithMany("GUIScreenTextScreenTitleInstructions")
                        .HasForeignKey("ScreenTitleInstruction")
                        .HasConstraintName("FK_GUIScreenText_screen_title_instruction");

                    b.Navigation("BtnAcceptCaptionNavigation");

                    b.Navigation("BtnBackCaptionNavigation");

                    b.Navigation("BtnCancelCaptionNavigation");

                    b.Navigation("FullInstructionsNavigation");

                    b.Navigation("GUIScreen");

                    b.Navigation("ScreenTitleInstructionNavigation");

                    b.Navigation("ScreenTitleNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.LanguageList", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Language", "DefaultLanguageNavigation")
                        .WithMany("LanguageLists")
                        .HasForeignKey("DefaultLanguage")
                        .IsRequired()
                        .HasConstraintName("FK_LanguageList_Language");

                    b.Navigation("DefaultLanguageNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.LanguageListLanguage", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Language", "LanguageItemNavigation")
                        .WithMany("LanguageListLanguages")
                        .HasForeignKey("LanguageItem")
                        .IsRequired()
                        .HasConstraintName("FK_LanguageList_Language_Language");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.LanguageList", "LanguageListNavigation")
                        .WithMany("LanguageListLanguages")
                        .HasForeignKey("LanguageList")
                        .IsRequired()
                        .HasConstraintName("FK_LanguageList_Language_LanguageList");

                    b.Navigation("LanguageItemNavigation");

                    b.Navigation("LanguageListNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PasswordHistory", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "UserNavigation")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("User")
                        .HasConstraintName("FK_PasswordHistory_User");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Permission", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Activity", "Activity")
                        .WithMany("Permissions")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_Permission_Activity");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Permission_Role");

                    b.Navigation("Activity");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Printout", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Transaction", "Tx")
                        .WithMany("Printouts")
                        .HasForeignKey("TxId")
                        .IsRequired()
                        .HasConstraintName("FK_Printout_Transaction");

                    b.Navigation("Tx");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemCategory", "CategoryNavigation")
                        .WithMany("SysTextItems")
                        .HasForeignKey("Category")
                        .IsRequired()
                        .HasConstraintName("FK_SysTextItem_SysTextItemCategory");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemType", "TextItemType")
                        .WithMany("SysTextItems")
                        .HasForeignKey("TextItemTypeId")
                        .HasConstraintName("FK_sysTextItem_sysTextItemType");

                    b.Navigation("CategoryNavigation");

                    b.Navigation("TextItemType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemCategory", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemCategory", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FK_TextItemCategory_TextItemCategory");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextTranslation", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Language", "LanguageCodeNavigation")
                        .WithMany("SysTextTranslations")
                        .HasForeignKey("LanguageCode")
                        .IsRequired()
                        .HasConstraintName("FK_sysTextTranslation_Language");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.SysTextItem", "SysTextItem")
                        .WithMany("SysTextTranslations")
                        .HasForeignKey("SysTextItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sysTextTranslation_sysTextItem");

                    b.Navigation("LanguageCodeNavigation");

                    b.Navigation("SysTextItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItemCategory", "CategoryNavigation")
                        .WithMany("TextItems")
                        .HasForeignKey("Category")
                        .IsRequired()
                        .HasConstraintName("FK_UI_TextItem_TextItemCategory");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItemType", "TextItemType")
                        .WithMany("TextItems")
                        .HasForeignKey("TextItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_UI_TextItem_TextItemType");

                    b.Navigation("CategoryNavigation");

                    b.Navigation("TextItemType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItemCategory", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItemCategory", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FK_UI_TextItemCategory_TextItemCategory");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextTranslation", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Language", "LanguageCodeNavigation")
                        .WithMany("TextTranslations")
                        .HasForeignKey("LanguageCode")
                        .IsRequired()
                        .HasConstraintName("FK_UI_Translation_Language");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "TextItem")
                        .WithMany("TextTranslations")
                        .HasForeignKey("TextItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UI_Translation_TextItem");

                    b.Navigation("LanguageCodeNavigation");

                    b.Navigation("TextItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Transaction", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "AuthUserNavigation")
                        .WithMany("TransactionAuthUsers")
                        .HasForeignKey("AuthUser")
                        .HasConstraintName("FK_Transaction_auth_user");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CIT", "CIT")
                        .WithMany("Transactions")
                        .HasForeignKey("CITId")
                        .HasConstraintName("FK_Transaction_CIT");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("Transactions")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_DeviceList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "InitUserNavigation")
                        .WithMany("TransactionInitUsers")
                        .HasForeignKey("InitUser")
                        .HasConstraintName("FK_Transaction_init_user");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.DepositorSession", "Session")
                        .WithMany("Transactions")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_DepositorSession");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "TxCurrencyNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("TxCurrency")
                        .HasConstraintName("FK_Transaction_Currency_Transaction");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", "TxTypeNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("TxType")
                        .HasConstraintName("FK_Transaction_TransactionTypeListItem");

                    b.Navigation("AuthUserNavigation");

                    b.Navigation("CIT");

                    b.Navigation("Device");

                    b.Navigation("InitUserNavigation");

                    b.Navigation("Session");

                    b.Navigation("TxCurrencyNavigation");

                    b.Navigation("TxTypeNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitListItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "CurrencyCodeNavigation")
                        .WithMany("TransactionLimitListItems")
                        .HasForeignKey("CurrencyCode")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionLimitListItem_Currency");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitList", "Transactionitemlist")
                        .WithMany("TransactionLimitListItems")
                        .HasForeignKey("TransactionitemlistId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionLimitListItem_TransactionLimitList");

                    b.Navigation("CurrencyCodeNavigation");

                    b.Navigation("Transactionitemlist");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionText", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "AccountNameCaptionNavigation")
                        .WithMany("TransactionTextAccountNameCaptions")
                        .HasForeignKey("AccountNameCaption")
                        .HasConstraintName("FK_TransactionText_Account_Name_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "AccountNumberCaptionNavigation")
                        .WithMany("TransactionTextAccountNumberCaptions")
                        .HasForeignKey("AccountNumberCaption")
                        .HasConstraintName("FK_TransactionText_Account_Number_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "AliasAccountNameCaptionNavigation")
                        .WithMany("TransactionTextAliasAccountNameCaptions")
                        .HasForeignKey("AliasAccountNameCaption")
                        .HasConstraintName("FK_TransactionText_Alias_Account_Name_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "AliasAccountNumberCaptionNavigation")
                        .WithMany("TransactionTextAliasAccountNumberCaptions")
                        .HasForeignKey("AliasAccountNumberCaption")
                        .HasConstraintName("FK_TransactionText_Alias_Account_Number_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "DepositorNameCaptionNavigation")
                        .WithMany("TransactionTextDepositorNameCaptions")
                        .HasForeignKey("DepositorNameCaption")
                        .HasConstraintName("FK_TransactionText_Depositor_Name_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "DisclaimerNavigation")
                        .WithMany("TransactionTextDisclaimers")
                        .HasForeignKey("Disclaimer")
                        .HasConstraintName("FK_TransactionText_Disclaimers");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "FullInstructionsNavigation")
                        .WithMany("TransactionTextFullInstructionss")
                        .HasForeignKey("FullInstructions")
                        .HasConstraintName("FK_TransactionText_full_instructions");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "FundsSourceCaptionNavigation")
                        .WithMany("TransactionTextFundsSourceCaptions")
                        .HasForeignKey("FundsSourceCaption")
                        .HasConstraintName("FK_TransactionText_Funds_Source_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "IdNumberCaptionNavigation")
                        .WithMany("TransactionTextIdNumberCaptions")
                        .HasForeignKey("IdNumberCaption")
                        .HasConstraintName("FK_TransactionText_IdNumberCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ListItemCaptionNavigation")
                        .WithMany("TransactionTextListItemCaptions")
                        .HasForeignKey("ListItemCaption")
                        .HasConstraintName("FK_TransactionText_ListItemCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "NarrationCaptionNavigation")
                        .WithMany("TransactionTextNarrationCaptions")
                        .HasForeignKey("NarrationCaption")
                        .HasConstraintName("FK_TransactionText_NarrationCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "PhoneNumberCaptionNavigation")
                        .WithMany("TransactionTextPhoneNumberCaptions")
                        .HasForeignKey("PhoneNumberCaption")
                        .HasConstraintName("FK_TransactionText_PhoneNumberCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ReceiptTemplateNavigation")
                        .WithMany("TransactionTextReceiptTemplates")
                        .HasForeignKey("ReceiptTemplate")
                        .HasConstraintName("FK_TransactionText_ReceiptTemplate");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ReferenceAccountNameCaptionNavigation")
                        .WithMany("TransactionTextReferenceAccountNameCaptions")
                        .HasForeignKey("ReferenceAccountNameCaption")
                        .HasConstraintName("FK_TransactionText_ReferenceAccountNameCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ReferenceAccountNumberCaptionNavigation")
                        .WithMany("TransactionTextReferenceAccountNumberCaptions")
                        .HasForeignKey("ReferenceAccountNumberCaption")
                        .HasConstraintName("FK_TransactionText_ReferenceAccountNumberCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "TermsNavigation")
                        .WithMany("TransactionTextTerms")
                        .HasForeignKey("Terms")
                        .HasConstraintName("FK_TransactionText_Terms");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", "TxItemNavigation")
                        .WithOne("TransactionText")
                        .HasForeignKey("Cashmere.Library.CashmereDataAccess.Entities.TransactionText", "TxItem")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_TransactionTypeListItem");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationText", "ValidationTextErrorMessageNavigation")
                        .WithMany("ValidationTextErrorMessages")
                        .HasForeignKey("ValidationTextErrorMessage")
                        .HasConstraintName("FK_TransactionText_ValidationTextErrorMessages");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationText", "ValidationTextSuccessMessageNavigation")
                        .WithMany("ValidationTextSuccessMessages")
                        .HasForeignKey("ValidationTextSuccessMessage")
                        .HasConstraintName("FK_TransactionText_ValidationTextSuccessMessages");

                    b.Navigation("AccountNameCaptionNavigation");

                    b.Navigation("AccountNumberCaptionNavigation");

                    b.Navigation("AliasAccountNameCaptionNavigation");

                    b.Navigation("AliasAccountNumberCaptionNavigation");

                    b.Navigation("DepositorNameCaptionNavigation");

                    b.Navigation("DisclaimerNavigation");

                    b.Navigation("FullInstructionsNavigation");

                    b.Navigation("FundsSourceCaptionNavigation");

                    b.Navigation("IdNumberCaptionNavigation");

                    b.Navigation("ListItemCaptionNavigation");

                    b.Navigation("NarrationCaptionNavigation");

                    b.Navigation("PhoneNumberCaptionNavigation");

                    b.Navigation("ReceiptTemplateNavigation");

                    b.Navigation("ReferenceAccountNameCaptionNavigation");

                    b.Navigation("ReferenceAccountNumberCaptionNavigation");

                    b.Navigation("TermsNavigation");

                    b.Navigation("TxItemNavigation");

                    b.Navigation("ValidationTextErrorMessageNavigation");

                    b.Navigation("ValidationTextSuccessMessageNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "DefaultAccountCurrencyNavigation")
                        .WithMany("TransactionTypeListItems")
                        .HasForeignKey("DefaultAccountCurrency")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionTypeListItem_Currency");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitList", "TxLimitListNavigation")
                        .WithMany("TransactionTypeListItems")
                        .HasForeignKey("TxLimitList")
                        .HasConstraintName("FK_TransactionTypeListItem_TransactionLimitList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionText", "TxTextNavigation")
                        .WithMany("TransactionTypeListItems")
                        .HasForeignKey("TxText")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TransactionTypeListItem_TransactionText");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionType", "TxTypeNavigation")
                        .WithMany("TransactionTypeListItems")
                        .HasForeignKey("TxType")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionListItem_TransactionType");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenList", "TxTypeGUIScreenlistNavigation")
                        .WithMany("TransactionTypeListItems")
                        .HasForeignKey("TxTypeGUIScreenlist")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionTypeListItem_GUIScreenList");

                    b.Navigation("DefaultAccountCurrencyNavigation");

                    b.Navigation("TxLimitListNavigation");

                    b.Navigation("TxTextNavigation");

                    b.Navigation("TxTypeGUIScreenlistNavigation");

                    b.Navigation("TxTypeNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListTransactionTypeListItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeList", "TxtypeListNavigation")
                        .WithMany("TransactionTypeListTransactionTypeListItems")
                        .HasForeignKey("TxtypeList")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionTypeList_TransactionTypeListItem_TransactionTypeList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", "TxtypeListItemNavigation")
                        .WithMany("TransactionTypeListTransactionTypeListItems")
                        .HasForeignKey("TxtypeListItem")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionTypeList_TransactionTypeListItem_TransactionTypeListItem");

                    b.Navigation("TxtypeListItemNavigation");

                    b.Navigation("TxtypeListNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", "ParentGroupNavigation")
                        .WithMany("InverseParentGroupNavigation")
                        .HasForeignKey("ParentGroup")
                        .HasConstraintName("FK_UserGroup_UserGroup");

                    b.Navigation("ParentGroupNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UserLock", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "InitiatingUserNavigation")
                        .WithMany("UserLocks")
                        .HasForeignKey("InitiatingUser")
                        .HasConstraintName("FK_UserLock_InitiatingUser");

                    b.Navigation("InitiatingUserNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationType", "ValidationType")
                        .WithMany("ValidationItems")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationItem_ValidationType");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationText", "ValidationText")
                        .WithMany("ValidationItems")
                        .HasForeignKey("ValidationTextId")
                        .HasConstraintName("FK_ValidationItem_ValidationText");

                    b.Navigation("ValidationText");

                    b.Navigation("ValidationType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationItemValue", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", "ValidationItem")
                        .WithMany("ValidationItemValues")
                        .HasForeignKey("ValidationItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationItemValue_ValidationItem");

                    b.Navigation("ValidationItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationListValidationItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", "ValidationItem")
                        .WithMany("ValidationListValidationItems")
                        .HasForeignKey("ValidationItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationList_ValidationItem_ValidationItem");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationList", "ValidationList")
                        .WithMany("ValidationListValidationItems")
                        .HasForeignKey("ValidationListId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationList_ValidationItem_ValidationList");

                    b.Navigation("ValidationItem");

                    b.Navigation("ValidationList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationText", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ErrorMessageNavigation")
                        .WithMany()
                        .HasForeignKey("ErrorMessage");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "SuccessMessageNavigation")
                        .WithMany()
                        .HasForeignKey("SuccessMessage");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", "ValidationItem")
                        .WithMany("ValidationTexts")
                        .HasForeignKey("ValidationItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationText_ValidationItem");

                    b.Navigation("ErrorMessageNavigation");

                    b.Navigation("SuccessMessageNavigation");

                    b.Navigation("ValidationItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Activity", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEvent", b =>
                {
                    b.Navigation("AlertEmails");

                    b.Navigation("AlertSMS");

                    b.Navigation("InverseAlertEventNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertMessageType", b =>
                {
                    b.Navigation("AlertMessageRegistries");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CITAuthUsers");

                    b.Navigation("CITStartUsers");

                    b.Navigation("DeviceLocks");

                    b.Navigation("DeviceLogins");

                    b.Navigation("EscrowJamAuthorisingUsers");

                    b.Navigation("EscrowJamInitialisingUsers");

                    b.Navigation("PasswordHistories");

                    b.Navigation("TransactionAuthUsers");

                    b.Navigation("TransactionInitUsers");

                    b.Navigation("UserLocks");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Bank", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Branch", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CIT", b =>
                {
                    b.Navigation("CITDenominations");

                    b.Navigation("CITPrintouts");

                    b.Navigation("CITTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Config", b =>
                {
                    b.Navigation("DeviceConfigs");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ConfigCategory", b =>
                {
                    b.Navigation("Configs");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", b =>
                {
                    b.Navigation("DeviceConfigs");

                    b.Navigation("Devices");

                    b.Navigation("InverseParentGroupNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Country", b =>
                {
                    b.Navigation("Banks");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Currency", b =>
                {
                    b.Navigation("CITDenominations");

                    b.Navigation("CurrencyListCurrencies");

                    b.Navigation("CurrencyLists");

                    b.Navigation("DeviceCITSuspenseAccounts");

                    b.Navigation("DeviceSuspenseAccounts");

                    b.Navigation("TransactionLimitListItems");

                    b.Navigation("TransactionTypeListItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CurrencyList", b =>
                {
                    b.Navigation("CurrencyListCurrencies");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DepositorSession", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Device", b =>
                {
                    b.Navigation("CITs");

                    b.Navigation("DepositorSessions");

                    b.Navigation("DeviceCITSuspenseAccounts");

                    b.Navigation("DeviceLocks");

                    b.Navigation("DeviceLogins");

                    b.Navigation("DevicePrinters");

                    b.Navigation("DeviceSuspenseAccounts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceType", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIPrepopItem", b =>
                {
                    b.Navigation("GUIPrepopListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIPrepopList", b =>
                {
                    b.Navigation("GUIPrepopListItems");

                    b.Navigation("GuiScreenListScreens");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIScreen", b =>
                {
                    b.Navigation("GUIScreenText")
                        .IsRequired();

                    b.Navigation("GuiScreenListScreens");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenList", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("GuiScreenListScreens");

                    b.Navigation("TransactionTypeListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenText", b =>
                {
                    b.Navigation("GUIScreens");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GUIScreenType", b =>
                {
                    b.Navigation("GUIScreens");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Language", b =>
                {
                    b.Navigation("DepositorSessions");

                    b.Navigation("LanguageListLanguages");

                    b.Navigation("LanguageLists");

                    b.Navigation("SysTextTranslations");

                    b.Navigation("TextTranslations");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.LanguageList", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("LanguageListLanguages");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Role", b =>
                {
                    b.Navigation("AlertMessageRegistries");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItem", b =>
                {
                    b.Navigation("SysTextTranslations");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemCategory", b =>
                {
                    b.Navigation("InverseParentNavigation");

                    b.Navigation("SysTextItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemType", b =>
                {
                    b.Navigation("SysTextItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItem", b =>
                {
                    b.Navigation("GUIPrepopItems");

                    b.Navigation("GUIScreenTextBtnAcceptCaptions");

                    b.Navigation("GUIScreenTextBtnBackCaptions");

                    b.Navigation("GUIScreenTextBtnCancelCaptions");

                    b.Navigation("GUIScreenTextFullInstructionss");

                    b.Navigation("GUIScreenTextScreenTitleInstructions");

                    b.Navigation("GUIScreenTextScreenTitles");

                    b.Navigation("TextTranslations");

                    b.Navigation("TransactionTextAccountNameCaptions");

                    b.Navigation("TransactionTextAccountNumberCaptions");

                    b.Navigation("TransactionTextAliasAccountNameCaptions");

                    b.Navigation("TransactionTextAliasAccountNumberCaptions");

                    b.Navigation("TransactionTextDepositorNameCaptions");

                    b.Navigation("TransactionTextDisclaimers");

                    b.Navigation("TransactionTextFullInstructionss");

                    b.Navigation("TransactionTextFundsSourceCaptions");

                    b.Navigation("TransactionTextIdNumberCaptions");

                    b.Navigation("TransactionTextListItemCaptions");

                    b.Navigation("TransactionTextNarrationCaptions");

                    b.Navigation("TransactionTextPhoneNumberCaptions");

                    b.Navigation("TransactionTextReceiptTemplates");

                    b.Navigation("TransactionTextReferenceAccountNameCaptions");

                    b.Navigation("TransactionTextReferenceAccountNumberCaptions");

                    b.Navigation("TransactionTextTerms");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItemCategory", b =>
                {
                    b.Navigation("InverseParentNavigation");

                    b.Navigation("TextItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItemType", b =>
                {
                    b.Navigation("TextItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Transaction", b =>
                {
                    b.Navigation("DenominationDetails");

                    b.Navigation("EscrowJams");

                    b.Navigation("Printouts");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitList", b =>
                {
                    b.Navigation("TransactionLimitListItems");

                    b.Navigation("TransactionTypeListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionText", b =>
                {
                    b.Navigation("TransactionTypeListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionType", b =>
                {
                    b.Navigation("TransactionTypeListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeList", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("TransactionTypeListTransactionTypeListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", b =>
                {
                    b.Navigation("TransactionText")
                        .IsRequired();

                    b.Navigation("TransactionTypeListTransactionTypeListItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Devices");

                    b.Navigation("InverseParentGroupNavigation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", b =>
                {
                    b.Navigation("ValidationItemValues");

                    b.Navigation("ValidationListValidationItems");

                    b.Navigation("ValidationTexts");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationList", b =>
                {
                    b.Navigation("GuiScreenListScreens");

                    b.Navigation("ValidationListValidationItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationText", b =>
                {
                    b.Navigation("ValidationItems");

                    b.Navigation("ValidationTextErrorMessages");

                    b.Navigation("ValidationTextSuccessMessages");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationType", b =>
                {
                    b.Navigation("ValidationItems");
                });
#pragma warning restore 612, 618
        }
    }
}
