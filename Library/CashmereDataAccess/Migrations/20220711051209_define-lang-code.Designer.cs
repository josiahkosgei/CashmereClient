// <auto-generated />
using System;
using Cashmere.Library.CashmereDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cashmere.Library.CashmereDataAccess.Migrations
{
    [DbContext(typeof(DepositorDBContext))]
    [Migration("20220711051209_define-lang-code")]
    partial class definelangcode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Short description of the activity being performed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The name of the activity. will be used in lookups");

                    b.HasKey("Id");

                    b.ToTable("Activity");

                    b.HasComment("a task a user needs permission to perform");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertAttachmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AlertTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("MimeSubtype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AlertAttachmentType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("AlertEventId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Corresponding Alert that is tied to this email message");

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Pipe delimited List of filenames for files to attach when sending. Files must be accessible from the server");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Datetime when the email message was created");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Email address of the sender");

                    b.Property<string>("HtmlMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The HTML formatted message");

                    b.Property<string>("RawTextMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The raw ANSI text version of the email for clients that do not support HTML emails e.g. mobile phones etc");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2")
                        .HasComment("Datetime when the email message was processed by the server");

                    b.Property<bool>("SendError")
                        .HasColumnType("bit")
                        .HasComment("Was there a fatal error during processing this email message");

                    b.Property<string>("SendErrorMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Error message returned by the server when email sending failed");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit")
                        .HasComment("Whether or not the email message has been processed by the server");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Subject of the email");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Fills the \"To:\" heading of the email");

                    b.HasKey("Id");

                    b.HasIndex("AlertEventId");

                    b.ToTable("AlertEmail");

                    b.HasComment("Stores emails sent by the system");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEmailAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlertEmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AlertEmailAttachment");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEmailResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AlertEmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("Error")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HtmlMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("RawTextMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("(N'NEW')");

                    b.HasKey("Id");

                    b.ToTable("AlertEmailResult");

                    b.HasComment("Result of sending an alert email");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("AlertEventId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("if this alert is paired with a previous alert, it is linked here");

                    b.Property<int>("AlertTypeId")
                        .HasColumnType("int")
                        .HasComment("the type of alert");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("The exact moment the alert was raised");

                    b.Property<DateTime>("DateDetected")
                        .HasColumnType("datetime2")
                        .HasComment("When was the alert detected, in case it is different from the created date. e.g. may indicate the event occured some other time, possibly before it was created in the db");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("datetime2")
                        .HasComment("If tied to another Alert, this is when the the paired Alert was resolved e.g. a door close alert may resolve a previous door open alert");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Device that raised the alert");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit")
                        .HasComment("has this alert been processed and messages created accordingly");

                    b.Property<bool>("IsProcessing")
                        .HasColumnType("bit")
                        .HasComment("is this alert currently being processed, used for concurrency control");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit")
                        .HasComment("whether the Alert in qustion has been resolved or is still open");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AlertEvent");

                    b.HasComment("An event that has raised an alert. Various messages can be sent based on the alert raised e.g. SMS EMail etc");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertMessageRegistry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("AlertTypeId")
                        .HasColumnType("int")
                        .HasComment("The type of alert the role can receive");

                    b.Property<bool>("EmailEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Can the role receive email");

                    b.Property<bool>("PhoneEnabled")
                        .HasColumnType("bit")
                        .HasComment("Can the role receive an SMS message for the alert message type");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The role that will be given rights to the AlertMssage type");

                    b.HasKey("Id");

                    b.HasIndex("AlertTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("AlertMessageRegistry");

                    b.HasComment("Register a role to receive an alert");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertMessageType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailContentTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The HTML template that will be merged into later");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("whether or not the alert message type in enabled and can be instantiated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the AlertMessage");

                    b.Property<string>("PhoneContentTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The SMS template that will be merged into later");

                    b.Property<string>("RawEmailContentTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The raw text template that will be merged into later");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Title displayed in th eheader sction of messages");

                    b.HasKey("Id");

                    b.ToTable("AlertMessageType");

                    b.HasComment("Types of messages for alerts sent via email or phone");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertSMS", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("AlertEventId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("the associated AlertEvent for this SMS message");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Datetime when the SMS alert message was created by the system");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("the number from which the SMS originates");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("the SMS text message to deliver");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2")
                        .HasComment("the datetime when the SMS message was processed");

                    b.Property<bool>("SendError")
                        .HasColumnType("bit")
                        .HasComment("was there a fatal rror during processing?");

                    b.Property<string>("SendErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("error mssage returned by the system while processing the SMS message");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit")
                        .HasComment("whether or not the SMS message was processed");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Pipe delimited List of phone numbers to receive SMSes");

                    b.HasKey("Id");

                    b.HasIndex("AlertEventId");

                    b.ToTable("AlertSMS");

                    b.HasComment("AlertSmses");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationException", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("ApplicationException", "exp");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Component")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Which internal component produced the log entry e.g. GUI, APIs, DeviceController etc");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("the details of the log message");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("The name of the log event");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("the type of the log event used for grouping and sorting");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2")
                        .HasComment("Datetime the system deems for the log entry.");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int")
                        .HasComment("the LogLevel");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SessionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The session this log entry belongs to");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SessionId");

                    b.ToTable("ApplicationLog");

                    b.HasComment("Stores the general application log that the GUI and other local systems write to");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("ApplicationUserLoginDetailId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorisinguserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DepositorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("user email address, used to receive emails from the system");

                    b.Property<bool>("EmailEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("whether or not the user is allowed to receive emails");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First names");

                    b.Property<Guid?>("InitialisinguserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdUser")
                        .HasColumnType("bit");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int")
                        .HasComment("how many unsuccessful login attempts has the user mad in a row. used to lock the user automatically");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(71)
                        .IsUnicode(false)
                        .HasColumnType("char(71)")
                        .IsFixedLength()
                        .HasComment("salted and hashed password utilising a password library");

                    b.Property<bool>("PasswordResetRequired")
                        .HasColumnType("bit")
                        .HasComment("should the user rset their password at their next login");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("the phone number for the user to rceive SMSes from the system");

                    b.Property<bool>("PhoneEnabled")
                        .HasColumnType("bit")
                        .HasComment("can the user receive SMSes from the system");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The role the user has e.g. Custodian, Branch Manager tc");

                    b.Property<bool>("UserDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("username for logging into the system");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserLoginDetailId");

                    b.HasIndex("AuthUserId")
                        .IsUnique()
                        .HasFilter("[AuthUserId] IS NOT NULL");

                    b.HasIndex("AuthorisinguserId")
                        .IsUnique()
                        .HasFilter("[AuthorisinguserId] IS NOT NULL");

                    b.HasIndex("InitialisinguserId")
                        .IsUnique()
                        .HasFilter("[InitialisinguserId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUserChangePassword", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("NewPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OldPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("PasswordPolicyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex("PasswordPolicyId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserChangePassword");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUserLoginDetail", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<int?>("GCRecord")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastLoginLogEntryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastPasswordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OTPEnabled")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("OTPExpire")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("ResetEmailCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("ResetEmailEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ResetEmailExpire")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex("LastLoginLogEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserLoginDetail");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("Bank");

                    b.HasComment("The bank that owns the depositor");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CashmereCommunicationServiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmailError")
                        .HasColumnType("int")
                        .HasColumnName("email_error");

                    b.Property<string>("EmailErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_error_message");

                    b.Property<int>("EmailStatus")
                        .HasColumnType("int")
                        .HasColumnName("email_status");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SmsError")
                        .HasColumnType("int")
                        .HasColumnName("sms_error");

                    b.Property<string>("SmsErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sms_error_message");

                    b.Property<int>("SmsStatus")
                        .HasColumnType("int")
                        .HasColumnName("sms_status");

                    b.HasKey("Id");

                    b.ToTable("CashmereCommunicationServiceStatus");

                    b.HasComment("status of the communication service for email, sms etc");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CIT", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Application User who authorised the CIT event");

                    b.Property<DateTime?>("CITCompleteDate")
                        .HasColumnType("datetime2")
                        .HasComment("Datetime when the CIT was completed");

                    b.Property<DateTime>("CITDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Datetime of the CIT");

                    b.Property<int>("CITError")
                        .HasColumnType("int")
                        .HasComment("The error code encountered during CIT");

                    b.Property<string>("CITErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Error message encounterd during CIT");

                    b.Property<bool>("Complete")
                        .HasColumnType("bit")
                        .HasComment("Has the CIT been completed, used for calculating incomplete CITs");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Device that conducted the CIT");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2")
                        .HasComment("The datetime from which the CIT calculations will be carrid out");

                    b.Property<string>("NewBagNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The asset number of the empty bag that was inserted");

                    b.Property<string>("OldBagNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The asset number of the Bag that was removed i.e. the full bag");

                    b.Property<string>("SealNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The numbr on the tamper evident seal tag used to seal the bag");

                    b.Property<Guid>("StartUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ApplicationUser who initiated the CIT");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2")
                        .HasComment("The datetime until which the CIT calculations will be carrid out");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("StartUserId");

                    b.ToTable("CIT");

                    b.HasComment("store a CIT transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITDenomination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("CITId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The CIT the record belongs to");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasComment("How many of the denomination were counted");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .IsFixedLength()
                        .HasComment("The currency code");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime2")
                        .HasComment("When this item was recorded");

                    b.Property<int>("Denom")
                        .HasColumnType("int")
                        .HasComment("denomination of note or coin in major currency");

                    b.Property<long>("Subtotal")
                        .HasColumnType("bigint")
                        .HasComment("The subtotal of the denomination calculated as denom*count");

                    b.HasKey("Id");

                    b.HasIndex("CITId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CITDenomination");

                    b.HasComment("currency and deomination breakdown of the CIT bag");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITPrintout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("CITId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The CIT this rceipt belongs to");

                    b.Property<DateTime>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsCopy")
                        .HasColumnType("bit")
                        .HasComment("Is this CIT Receipt a copy, used for marking duplicate receipts");

                    b.Property<string>("PrintContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Text of the receipt");

                    b.Property<Guid>("PrintGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Receipt SHA512 hash");

                    b.HasKey("Id");

                    b.HasIndex("CITId");

                    b.ToTable("CITPrintout");

                    b.HasComment("Stores CIT receipts");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CITId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CbDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CbStatusDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CbTxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CbTxStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuspenseAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CITId");

                    b.ToTable("CITTransaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Config", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Config");

                    b.HasComment("Configuration List");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ConfigCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the AlertMessage");

                    b.HasKey("Id");

                    b.ToTable("ConfigCategory");

                    b.HasComment("Categorisation of configuration opions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentGroupId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("ConfigGroup");

                    b.HasComment("Group together configurations so devices can share configs");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .HasDefaultValueSql("('')")
                        .IsFixedLength();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("CountryCode");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CrashEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDetected")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("CrashEvent", "exp");

                    b.HasComment("contains a crash report");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Currency", b =>
                {
                    b.Property<string>("Code")
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .IsFixedLength()
                        .HasComment("ISO 4217 Three Character Currency Code");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasComment("whether the system supports the language");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("two character country code for the national flag to display for the language");

                    b.Property<string>("Iso3NumericCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Minor")
                        .HasColumnType("int")
                        .HasComment("Expresses the relationship between a major currency unit and its corresponding minor currency unit. This mechanism is called the currency \"exponent\" and assumes a base of 10. Will be used with converters in the GUI");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Name of the currency");

                    b.HasKey("Code");

                    b.ToTable("Currency");

                    b.HasComment("Currency enumeration");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CurrencyList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DefaultCurrencyId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultCurrencyId");

                    b.ToTable("CurrencyList");

                    b.HasComment("Enumeration of allowed Currencies. A device can then associate with a currency List");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CurrencyListCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("CurrencyItemId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .IsFixedLength()
                        .HasComment("The currency in the List");

                    b.Property<int>("CurrencyListId")
                        .HasColumnType("int")
                        .HasComment("The Currency List to which the currency is associated");

                    b.Property<int>("CurrencyOrder")
                        .HasColumnType("int")
                        .HasComment("ASC Order of sorting for currencies in List.");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int");

                    b.Property<long>("MaxValue")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyItemId");

                    b.HasIndex("CurrencyListId");

                    b.ToTable("CurrencyListCurrency");

                    b.HasComment("[m2m] Currency and CurrencyList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DashboardDatum", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<bool?>("SynchronizeTitle")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DashboardData");

                    b.ToTable("DashboardDatum");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DenominationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasComment("How many of the denomination were counted");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Denom")
                        .HasColumnType("int")
                        .HasComment("denomination of note or coin in major currency");

                    b.Property<long>("Subtotal")
                        .HasColumnType("bigint")
                        .HasComment("The subtotal of the denomination calculated as denom*count");

                    b.Property<Guid>("TxId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TxId");

                    b.ToTable("DenominationDetail");

                    b.HasComment("Denomination enumeration for a Transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DepositorSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool>("AccountVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("Complete")
                        .HasColumnType("bit");

                    b.Property<bool>("CompleteSuccess")
                        .HasColumnType("bit");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<bool>("ReferenceAccountVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("SessionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("DepositorSession");

                    b.HasComment("Stores details of a customer deposit session. Asuccessful session ends in a successful transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("AppKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConfigGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyListId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeviceLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("GuiScreenListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("LanguageListId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int")
                        .HasComment("how many times in a row a login attempt has failed");

                    b.Property<int>("LoginCycles")
                        .HasColumnType("int")
                        .HasComment("how many cycles of failed logins have been detected. used to lock the machine in case of password guessing");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("char(128)")
                        .IsFixedLength();

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("char(128)")
                        .IsFixedLength();

                    b.Property<int>("TransactionTypeListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserGroupId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ConfigGroupId");

                    b.HasIndex("CurrencyListId");

                    b.HasIndex("GuiScreenListId");

                    b.HasIndex("LanguageListId");

                    b.HasIndex("TransactionTypeListId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceCITSuspenseAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("char(900)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceCITSuspenseAccount");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("ConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("GroupId");

                    b.ToTable("DeviceConfig");

                    b.HasComment("Link a Device to its configuration");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceLock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LockDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockedByDevice")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LockingUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebLockingUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceLock");

                    b.HasComment("Record device locking and unlocking activity");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool?>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<bool?>("DepositorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ForcedLogout")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceLogin");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DevicePrinter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsInfront")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Is the printer in the front i.e. customer facing or in the rear i.e. custodian facing");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DevicePrinter");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("BaCurrency")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char")
                        .IsFixedLength();

                    b.Property<string>("BaStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BagNoteCapacity")
                        .IsRequired()
                        .HasColumnType("nchar")
                        .IsFixedLength();

                    b.Property<int>("BagNoteLevel")
                        .HasColumnType("int");

                    b.Property<string>("BagNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BagPercentFull")
                        .HasColumnType("int");

                    b.Property<string>("BagStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BagValueCapacity")
                        .HasColumnType("bigint");

                    b.Property<long?>("BagValueLevel")
                        .HasColumnType("bigint");

                    b.Property<string>("ControllerState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EscrowPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EscrowStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EscrowType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MachineDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("SensorsBag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SensorsDoor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SensorsStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SensorsType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorsValue")
                        .HasColumnType("int");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceStatus");

                    b.HasComment("Current State of the device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceSuspenseAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .IsFixedLength();

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceSuspenseAccount");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CoinEscrow")
                        .HasColumnType("bit");

                    b.Property<bool>("CoinIn")
                        .HasColumnType("bit");

                    b.Property<bool>("CoinOut")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("NoteEscrow")
                        .HasColumnType("bit");

                    b.Property<bool>("NoteIn")
                        .HasColumnType("bit");

                    b.Property<bool>("NoteOut")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DeviceType");

                    b.HasComment("Describes the type of device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.EscrowJam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorisinguserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateDetected")
                        .HasColumnType("datetime2");

                    b.Property<long>("DroppedAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("EscrowAmount")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("InitialisinguserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("PostedAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RecoveryDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RetreivedAmount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("TransactionId");

                    b.ToTable("EscrowJam", "exp");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiPrepopItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ValueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ValueId");

                    b.ToTable("GuiPrepopItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiPrepopList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool>("AllowFreeText")
                        .HasColumnType("bit");

                    b.Property<int>("DefaultIndex")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.ToTable("GuiPrepopList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiPrepopListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("GuiPrepopItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuiPrepopListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuiPrepopItemId");

                    b.HasIndex("GuiPrepopListId");

                    b.ToTable("GuiPrepopListItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GuiScreenTextId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GuiScreenTypeId")
                        .HasColumnType("int");

                    b.Property<string>("InputMask")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("IsMasked")
                        .HasColumnType("bit");

                    b.Property<int?>("Keyboard")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PrefillText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Text to prefil in the textbox");

                    b.HasKey("Id");

                    b.HasIndex("GuiScreenTextId");

                    b.HasIndex("GuiScreenTypeId");

                    b.ToTable("GuiScreen");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GuiScreenListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GuiScreenListId")
                        .IsUnique()
                        .HasFilter("[GuiScreenListId] IS NOT NULL");

                    b.ToTable("GuiScreenList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenListScreen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GuiPrepopListId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GuiScreenId")
                        .HasColumnType("int");

                    b.Property<int>("GuiScreenListId")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<int>("ScreenOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("ValidationListId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GuiPrepopListId");

                    b.HasIndex("GuiScreenId");

                    b.HasIndex("GuiScreenListId");

                    b.HasIndex("ValidationListId");

                    b.ToTable("GuiScreenListScreen");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("BtnAcceptCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BtnBackCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BtnCancelCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FullInstructionsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GuiScreenId")
                        .HasColumnType("int")
                        .HasComment("The GUIScreen this entry corresponds to");

                    b.Property<Guid>("ScreenTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScreenTitleInstructionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BtnAcceptCaptionId");

                    b.HasIndex("BtnBackCaptionId");

                    b.HasIndex("BtnCancelCaptionId");

                    b.HasIndex("FullInstructionsId");

                    b.HasIndex("GuiScreenId");

                    b.HasIndex("ScreenTitleId");

                    b.HasIndex("ScreenTitleInstructionId");

                    b.ToTable("GuiScreenText");

                    b.HasComment("Stores the text for a screen for a language");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GuiScreenType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasComment("whether the system supports the language");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("two character country code for the national flag to display for the language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Code")
                        .HasName("PK_Languages");

                    b.ToTable("Language");

                    b.HasComment("Available languages in the system");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.LanguageList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DefaultLanguageId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultLanguageId");

                    b.ToTable("LanguageList");

                    b.HasComment("A List of languages a device supports");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.LanguageListLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("LanguageItemId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<int>("LanguageListId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageItemId");

                    b.HasIndex("LanguageListId");

                    b.ToTable("LanguageListLanguage");

                    b.HasComment("[m2m] LanguageList and Language");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ModelDifference", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContextId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.ToTable("ModelDifference");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ModelDifferenceAspect", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Xml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.HasIndex("OwnerId");

                    b.ToTable("ModelDifferenceAspect");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PasswordHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PasswordHistory");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PasswordPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AllowedSpecial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ExpiryDays")
                        .HasColumnType("int");

                    b.Property<int>("HistorySize")
                        .HasColumnType("int");

                    b.Property<int>("MinDigits")
                        .HasColumnType("int");

                    b.Property<int>("MinLength")
                        .HasColumnType("int");

                    b.Property<int>("MinLowercase")
                        .HasColumnType("int");

                    b.Property<int>("MinSpecial")
                        .HasColumnType("int");

                    b.Property<int>("MinUppercase")
                        .HasColumnType("int");

                    b.Property<bool>("UseHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.ToTable("PasswordPolicy");

                    b.HasComment("The system password policy");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StandaloneAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("StandaloneAuthenticationRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("StandaloneCanAuthenticate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission");

                    b.HasComment("grant a role to perform an activity");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("Members")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePermissionObjectId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex("TypePermissionObjectId");

                    b.ToTable("PermissionPolicyMemberPermissionsObject");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyNavigationPermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ItemPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionPolicyNavigationPermissionsObject");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("int");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePermissionObjectId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex("TypePermissionObjectId");

                    b.ToTable("PermissionPolicyObjectPermissionsObject");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyRole", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CanEditModel")
                        .HasColumnType("bit");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAdministrative")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ObjectTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionPolicy")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex("ObjectTypeId");

                    b.ToTable("PermissionPolicyRole");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyTypePermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreateState")
                        .HasColumnType("int");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("int");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionPolicyTypePermissionsObject");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PingRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsError")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MessageDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestUuid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RequestUUID");

                    b.Property<bool>("ServerOnline")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PingRequest", "cb");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PrinterStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool>("CoverOpen")
                        .HasColumnType("bit");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPaper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsError")
                        .HasColumnType("bit");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("PrinterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PrinterStatus");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Printout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsCopy")
                        .HasColumnType("bit");

                    b.Property<string>("PrintContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PrintGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TxId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TxId");

                    b.ToTable("Printout");

                    b.HasComment("Stores contents of a printout for a transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasComment("a user's role storing all their permissions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SessionException", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Stack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionException", "exp");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultTranslation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TextItemTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TextItemTypeId");

                    b.ToTable("SysTextItem", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SysTextItemCategory", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SysTextItemType", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<Guid>("SysTextItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TranslationSysText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("SysTextItemId");

                    b.ToTable("SysTextTranslation", "xlns");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultTranslation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TextItemTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TextItemTypeId");

                    b.ToTable("TextItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("TextItemCategory");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TextItemType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<Guid>("TextItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TranslationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("TextItemId");

                    b.ToTable("TextTranslation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ThisDevice", b =>
                {
                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConfigGroup")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyList")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeviceLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("GuiscreenList")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LanguageList")
                        .HasColumnType("int");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<int>("LoginCycles")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TransactionTypeList")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserGroup")
                        .HasColumnType("int");

                    b.ToTable("ThisDevice");

                    b.ToView("ThisDevice");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())")
                        .HasComment("Globally Unique Identifier for replication");

                    b.Property<Guid?>("AuthUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CITId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CbAccountName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("The account name returned by core banking.");

                    b.Property<DateTime?>("CbDate")
                        .HasColumnType("datetime2")
                        .HasComment("Core banking returned transaction date and time");

                    b.Property<string>("CbRefAccountName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Core banking returned Reference Account Name if any following a validation request for a Reference Account Number");

                    b.Property<string>("CbStatusDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional status details returned by core banking e.g. 'Amount must be less that MAX_AMOUNT'");

                    b.Property<string>("CbTxNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Core banking returned transaction number");

                    b.Property<string>("CbTxStatus")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Core banking returned transaction status e.g. SUCCESS or FAILURE");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EscrowJam")
                        .HasColumnType("bit");

                    b.Property<string>("FundsSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InitUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("JamDetected")
                        .HasColumnType("bit");

                    b.Property<bool>("NotesRejected")
                        .HasColumnType("bit");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The session this transaction fullfills");

                    b.Property<string>("TxAccountNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Account Number for crediting. This can be a suspense account");

                    b.Property<long?>("TxAmount")
                        .HasColumnType("bigint");

                    b.Property<bool>("TxCompleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate if the transaction has completed or is in progress");

                    b.Property<string>("TxCurrency")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .IsFixedLength()
                        .HasComment("User selected currency. A transaction can only have one currency at a time");

                    b.Property<string>("TxDepositorName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Customer's name");

                    b.Property<DateTime?>("TxEndDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the transaction was recorded in the database. Can be different from core banking's transaction date");

                    b.Property<int>("TxErrorCode")
                        .HasColumnType("int")
                        .HasComment("Last error code encountered during the transaction");

                    b.Property<string>("TxErrorMessage")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Last error message encountered during the transaction");

                    b.Property<string>("TxIdNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Customer's ID number");

                    b.Property<string>("TxNarration")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("The narration from the deposit slip. Usually set to 16 characters in core banking");

                    b.Property<string>("TxPhone")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Customer entered phone number");

                    b.Property<int?>("TxRandomNumber")
                        .HasColumnType("int");

                    b.Property<string>("TxRefAccount")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Used for double validation transactions where the user enters a second account number. E.g Mpesa Agent Number");

                    b.Property<int>("TxResult")
                        .HasColumnType("int")
                        .HasComment("Boolean for if the transaction succeeded 100% without encountering a critical terminating error");

                    b.Property<DateTime>("TxStartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the transaction was recorded in the database. Can be different from core banking's transaction date");

                    b.Property<string>("TxSuspenseAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TxType")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasComment("The transaction type chosen by the user from TransactionTypeListItem");

                    b.HasKey("Id");

                    b.HasIndex("CITId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TxCurrency");

                    b.HasIndex("TxType");

                    b.ToTable("Transaction");

                    b.HasComment("Stores the summary of a transaction attempt. A transaction can have various stages of completion if an error is encountered.");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionException", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionException", "exp");

                    b.HasComment("Exceptions encountered during execution");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionLimitList");

                    b.HasComment("Sets the transaction limit amounts for each currency");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .IsFixedLength()
                        .HasComment("ISO 4217 Three Character Currency Code");

                    b.Property<long>("FundsSourceAmount")
                        .HasColumnType("bigint")
                        .HasComment("The amount after which the Source of Funds screen will be shown");

                    b.Property<int>("OvercountAmount")
                        .HasColumnType("int");

                    b.Property<long>("OverdepositAmount")
                        .HasColumnType("bigint")
                        .HasComment("The amount after which the CDM will disable the counter");

                    b.Property<bool>("PreventOvercount")
                        .HasColumnType("bit");

                    b.Property<bool>("PreventOverdeposit")
                        .HasColumnType("bit")
                        .HasComment("CDM will not accept further deposits past the maximum");

                    b.Property<bool>("PreventUnderdeposit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("ShowFundsForm")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowFundsSource")
                        .HasColumnType("bit")
                        .HasComment("Whether to show the source of funds screen after deposit limit is reached or passed");

                    b.Property<Guid>("TransactionLimitListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("UnderdepositAmount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("TransactionLimitListId");

                    b.ToTable("TransactionLimitListItem");

                    b.HasComment("Limit values for each currency");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionPosting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime?>("AuthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AuthResponse")
                        .HasColumnType("int");

                    b.Property<Guid?>("AuthorisingUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CbDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CbStatusDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CbTxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CbTxStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CrAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("CrCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeviceInitiated")
                        .HasColumnType("bit");

                    b.Property<string>("DrAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DrAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("DrCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InitialisingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TxId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorisingUserId");

                    b.HasIndex("InitialisingUserId");

                    b.HasIndex("TxId");

                    b.ToTable("TransactionPosting");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("AccountNameCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountNumberCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AliasAccountNameCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AliasAccountNumberCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepositorNameCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DisclaimerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FullInstructionsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FundsSourceCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdNumberCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ListItemCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NarrationCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhoneNumberCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceiptTemplateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferenceAccountNameCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferenceAccountNumberCaptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TermsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TxItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountNameCaptionId");

                    b.HasIndex("AccountNumberCaptionId");

                    b.HasIndex("AliasAccountNameCaptionId");

                    b.HasIndex("AliasAccountNumberCaptionId");

                    b.HasIndex("DepositorNameCaptionId");

                    b.HasIndex("DisclaimerId");

                    b.HasIndex("FullInstructionsId");

                    b.HasIndex("FundsSourceCaptionId");

                    b.HasIndex("IdNumberCaptionId");

                    b.HasIndex("ListItemCaptionId");

                    b.HasIndex("NarrationCaptionId");

                    b.HasIndex("PhoneNumberCaptionId");

                    b.HasIndex("ReceiptTemplateId");

                    b.HasIndex("ReferenceAccountNameCaptionId");

                    b.HasIndex("ReferenceAccountNumberCaptionId");

                    b.HasIndex("TermsId");

                    b.HasIndex("TxItemId")
                        .IsUnique();

                    b.ToTable("TransactionText");

                    b.HasComment("Stores the multi language texts for a tx");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Vendor supplied ScreenType GUID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("common description for the transaction type");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("common name for the transaction e.g. Mpesa Deposit");

                    b.HasKey("Id");

                    b.ToTable("TransactionType");

                    b.HasComment("");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypeList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AuthUserRequired")
                        .HasColumnType("bit");

                    b.Property<string>("CbTxType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("A string passed to core banking with transaction details so core banking can route the deposit to the correct handler");

                    b.Property<string>("DefaultAccount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("the default account that pre-polulates the AccountNumber of a transaction");

                    b.Property<string>("DefaultAccountCurrencyId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("char(900)")
                        .HasDefaultValueSql("('KES')")
                        .IsFixedLength();

                    b.Property<string>("DefaultAccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("common description for the transaction type");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte[]>("Icon")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("InitUserRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("common name for the transaction e.g. Mpesa Deposit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TxLimitListId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TxTextId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TxTypeGuiScreenListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TxTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ValidateDefaultAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("ValidateReferenceAccount")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAccountCurrencyId");

                    b.HasIndex("TxLimitListId");

                    b.HasIndex("TxTextId");

                    b.HasIndex("TxTypeGuiScreenListId");

                    b.HasIndex("TxTypeId");

                    b.ToTable("TransactionTypeListItem");

                    b.HasComment("Transactions that the system can perform e.g. regular deposit, Mpesa deposit, etc");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListTransactionTypeListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<int>("TxtypeListId")
                        .HasColumnType("int");

                    b.Property<int>("TxtypeListItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TxtypeListId");

                    b.HasIndex("TxtypeListItemId");

                    b.ToTable("TransactionTypeListTransactionTypeListItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionView", b =>
                {
                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CITId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CbStatus")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("CbTransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<long>("Denomination100")
                        .HasColumnType("bigint");

                    b.Property<long>("Denomination1000")
                        .HasColumnType("bigint");

                    b.Property<long>("Denomination200")
                        .HasColumnType("bigint");

                    b.Property<long>("Denomination50")
                        .HasColumnType("bigint");

                    b.Property<long>("Denomination500")
                        .HasColumnType("bigint");

                    b.Property<string>("DepositorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("JamDetected")
                        .HasColumnType("bit");

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RandomNumber")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceAccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReferenceAccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SubTotal")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("TransactionView");

                    b.ToView("TransactionView");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UptimeComponentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComponentState")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Device")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UptimeComponentState");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UptimeMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Device")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DeviceMode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UptimeMode");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentGroupId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("UserGroup");

                    b.HasComment("groups together users ho have privileges on the same machine");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UserLock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("ApplicationUserLoginDetailId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InitiatingUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LockType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("WebPortalInitiated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserLoginDetailId");

                    b.HasIndex("InitiatingUserId");

                    b.ToTable("UserLock");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasComment("common description for the transaction type");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("common name for the transaction e.g. Mpesa Deposit");

                    b.Property<Guid?>("ValidationTextId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ValidationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ValidationTextId");

                    b.HasIndex("ValidationTypeId");

                    b.ToTable("ValidationItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationItemValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ValidationItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ValidationItemId");

                    b.ToTable("ValidationItemValue");

                    b.HasComment("Individual values for the validation");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("common description for the transaction type");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("common name for the transaction e.g. Mpesa Deposit");

                    b.HasKey("Id");

                    b.ToTable("ValidationList");

                    b.HasComment("List of validations to be performed on a field");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationListValidationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ValidationItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ValidationListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ValidationItemId");

                    b.HasIndex("ValidationListId");

                    b.ToTable("ValidationListValidationItem");

                    b.HasComment("Link a ValidationItem to a ValidationList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("ErrorMessageId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuccessMessageId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ValidationItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ErrorMessageId");

                    b.HasIndex("SuccessMessageId");

                    b.HasIndex("ValidationItemId");

                    b.ToTable("ValidationText");

                    b.HasComment("Multilanguage validation result text");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("common description for the transaction type");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("common name for the transaction e.g. Mpesa Deposit");

                    b.HasKey("Id");

                    b.ToTable("ValidationType");

                    b.HasComment("The type of validation e.g. regex, etc");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ViewConfig", b =>
                {
                    b.Property<string>("ConfigId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ViewConfig");

                    b.ToView("viewConfig");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ViewPermission", b =>
                {
                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("StandaloneAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("StandaloneAuthenticationRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("StandaloneCanAuthenticate")
                        .HasColumnType("bit");

                    b.ToTable("ViewPermission");

                    b.ToView("viewPermissions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.WebPortalLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserLoginDetailId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SFBegone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SessionID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.Property<int?>("WebPortalLoginAction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserLoginDetailId");

                    b.ToTable("WebPortalLogin");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.WebPortalRole", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Oid");

                    b.ToTable("WebPortalRole");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.WebPortalRoleRolesApplicationUserApplicationUser", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUsersId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("RolesId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex("ApplicationUsersId");

                    b.HasIndex("RolesId");

                    b.ToTable("WebPortalRoleRolesApplicationUserApplicationUser");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.WebUserLoginCount", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.ToTable("WebUserLoginCount");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.WebUserPasswordHistory", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.ToTable("WebUserPasswordHistory");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.XpobjectType", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"), 1L, 1);

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.HasKey("Oid");

                    b.ToTable("XpobjectType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.StoredProcs.GetCITDenominationByDatesResult", b =>
                {
                    b.Property<long?>("Count")
                        .HasColumnType("bigint");

                    b.Property<int>("Denom")
                        .HasColumnType("int");

                    b.Property<long?>("SubTotal")
                        .HasColumnType("bigint");

                    b.Property<string>("Txcurrency")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.StoredProcs.GetDestinationEmailsByAlertTypeResult", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.StoredProcs.HashTransactionResult", b =>
                {
                    b.Property<string>("NewHash")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.StoredProcs.Models.GetDeviceConfigByUserGroupResult", b =>
                {
                    b.Property<string>("ConfigId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.ToView(null);
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.StoredProcs.Models.GetDeviceUsersByDeviceResult", b =>
                {
                    b.Property<Guid?>("ApplicationUserLoginDetail")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DepositorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PasswordResetRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("UserDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserGroup")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Views.DenominationView", b =>
                {
                    b.Property<long?>("Subtotal")
                        .HasColumnType("bigint")
                        .HasColumnName("subtotal");

                    b.Property<Guid>("TxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tx_id");

                    b.Property<long>("_100")
                        .HasColumnType("bigint")
                        .HasColumnName("100");

                    b.Property<long>("_1000")
                        .HasColumnType("bigint")
                        .HasColumnName("1000");

                    b.Property<long>("_200")
                        .HasColumnType("bigint")
                        .HasColumnName("200");

                    b.Property<long>("_50")
                        .HasColumnType("bigint")
                        .HasColumnName("50");

                    b.Property<long>("_500")
                        .HasColumnType("bigint")
                        .HasColumnName("500");

                    b.ToTable("DenominationView");

                    b.ToView("DenominationView");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEmail", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.AlertEvent", "AlertEvent")
                        .WithMany("AlertEmails")
                        .HasForeignKey("AlertEventId")
                        .IsRequired()
                        .HasConstraintName("FK_AlertEmail_AlertEmailEvent");

                    b.Navigation("AlertEvent");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertMessageRegistry", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.AlertMessageType", "AlertMessageType")
                        .WithMany("AlertMessageRegistries")
                        .HasForeignKey("AlertTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_AlertMessageRegistry_AlertMessageType");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Role", "Role")
                        .WithMany("AlertMessageRegistries")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AlertMessageRegistry_Role");

                    b.Navigation("AlertMessageType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertSMS", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.AlertEvent", "AlertEvent")
                        .WithMany("AlertSMSes")
                        .HasForeignKey("AlertEventId")
                        .IsRequired()
                        .HasConstraintName("FK_AlertSMS_AlertEvent");

                    b.Navigation("AlertEvent");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationException", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("ApplicationExceptions")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationException_Device");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationLog", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("ApplicationLogs")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationLog_Device");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.DepositorSession", "Session")
                        .WithMany("ApplicationLogs")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationLog_DepositorSession");

                    b.Navigation("Device");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUserLoginDetail", "ApplicationUserLoginDetail")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationUserLoginDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUser_ApplicationUserLoginDetail");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CIT", null)
                        .WithOne("AuthorisingUser")
                        .HasForeignKey("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "AuthUserId")
                        .HasConstraintName("FK_CIT_ApplicationUser_AuthUser");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.EscrowJam", null)
                        .WithOne("AuthorisingUser")
                        .HasForeignKey("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "AuthorisinguserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_EscrowJam_AppUser_Approver");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.EscrowJam", null)
                        .WithOne("InitialisingUser")
                        .HasForeignKey("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "InitialisinguserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_EscrowJam_AppUser_Initiator");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Role", "Role")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUser_Role");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", "UserGroup")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("UserGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUser_UserGroup");

                    b.Navigation("ApplicationUserLoginDetail");

                    b.Navigation("Role");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUserChangePassword", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.PasswordPolicy", "PasswordPolicy")
                        .WithMany("ApplicationUserChangePasswords")
                        .HasForeignKey("PasswordPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUserChangePassword_PasswordPolicy");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "User")
                        .WithMany("ApplicationUserChangePasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUserChangePassword_User");

                    b.Navigation("PasswordPolicy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUserLoginDetail", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.WebPortalLogin", "LastLoginLogEntry")
                        .WithMany("ApplicationUserLoginDetails")
                        .HasForeignKey("LastLoginLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUserLoginDetail_LastLoginLogEntry");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "User")
                        .WithMany("ApplicationUserLoginDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUserLoginDetail_User");

                    b.Navigation("LastLoginLogEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Bank", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Country", "Country")
                        .WithMany("Banks")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK_Bank_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Branch", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Bank", "Bank")
                        .WithMany("Branches")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Branch_Bank");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CIT", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", null)
                        .WithMany("CITAuthUsers")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("CITs")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_CIT_DeviceList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "StartUser")
                        .WithMany("CITStartUsers")
                        .HasForeignKey("StartUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CIT_ApplicationUser_StartUser");

                    b.Navigation("Device");

                    b.Navigation("StartUser");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITDenomination", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CIT", "CIT")
                        .WithMany("CITDenominations")
                        .HasForeignKey("CITId")
                        .IsRequired()
                        .HasConstraintName("FK_CITDenominations_CIT");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "Currency")
                        .WithMany("CITDenominations")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_CITDenominations_Currency");

                    b.Navigation("CIT");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITPrintout", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CIT", "CIT")
                        .WithMany("CITPrintouts")
                        .HasForeignKey("CITId")
                        .IsRequired()
                        .HasConstraintName("FK_CITPrintout_CIT");

                    b.Navigation("CIT");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CITTransaction", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CIT", "CIT")
                        .WithMany("CITTransactions")
                        .HasForeignKey("CITId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CIT");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Config", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ConfigCategory", "ConfigCategory")
                        .WithMany("Configs")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Config_ConfigCategory");

                    b.Navigation("ConfigCategory");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", "ParentGroup")
                        .WithMany("ParentGroups")
                        .HasForeignKey("ParentGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_ConfigGroup_ConfigGroup");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CrashEvent", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("CrashEvents")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_CrashEvent_Device");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CurrencyList", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "DefaultCurrency")
                        .WithMany("CurrencyLists")
                        .HasForeignKey("DefaultCurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_CurrencyList_Currency");

                    b.Navigation("DefaultCurrency");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CurrencyListCurrency", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "CurrencyItem")
                        .WithMany("CurrencyListCurrencies")
                        .HasForeignKey("CurrencyItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Currency_CurrencyList_Currency");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CurrencyList", "CurrencyList")
                        .WithMany("CurrencyListCurrencies")
                        .HasForeignKey("CurrencyListId")
                        .IsRequired()
                        .HasConstraintName("FK_Currency_CurrencyList_CurrencyList");

                    b.Navigation("CurrencyItem");

                    b.Navigation("CurrencyList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DenominationDetail", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Transaction", "Transaction")
                        .WithMany("DenominationDetails")
                        .HasForeignKey("TxId")
                        .IsRequired()
                        .HasConstraintName("FK_DenominationDetail_Transaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DepositorSession", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DepositorSessions")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DepositorSession_DeviceList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Language", "Language")
                        .WithMany("DepositorSessions")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DepositorSession_Language");

                    b.Navigation("Device");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Device", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Branch", "Branch")
                        .WithMany("Devices")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_Branch");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", "ConfigGroup")
                        .WithMany("Devices")
                        .HasForeignKey("ConfigGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_ConfigGroup");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CurrencyList", "CurrencyList")
                        .WithMany("Devices")
                        .HasForeignKey("CurrencyListId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_CurrencyList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenList", "GuiScreenList")
                        .WithMany("Devices")
                        .HasForeignKey("GuiScreenListId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_GUIScreenList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.LanguageList", "LanguageList")
                        .WithMany("Devices")
                        .HasForeignKey("LanguageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Device_LanguageList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeList", "TransactionTypeList")
                        .WithMany("Devices")
                        .HasForeignKey("TransactionTypeListId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_TransactionTypeList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.DeviceType", "DeviceType")
                        .WithMany("Devices")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_DeviceType");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", "UserGroup")
                        .WithMany("Devices")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DeviceList_UserGroup");

                    b.Navigation("Branch");

                    b.Navigation("ConfigGroup");

                    b.Navigation("CurrencyList");

                    b.Navigation("DeviceType");

                    b.Navigation("GuiScreenList");

                    b.Navigation("LanguageList");

                    b.Navigation("TransactionTypeList");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceCITSuspenseAccount", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "Currency")
                        .WithMany("DeviceCITSuspenseAccounts")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceConfig", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Config", "Config")
                        .WithMany("DeviceConfigs")
                        .HasForeignKey("ConfigId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceConfig_Config");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", "ConfigGroup")
                        .WithMany("DeviceConfigs")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceConfig_ConfigGroup");

                    b.Navigation("Config");

                    b.Navigation("ConfigGroup");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceLock", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("DeviceLocks")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DeviceLocks")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceLock_Device");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceLogin", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DeviceLogins")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceLogin_Device");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("DeviceLogins")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceLogin_ApplicationUser");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DevicePrinter", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DevicePrinters")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DevicePrinter_DeviceList");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceSuspenseAccount", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "Currency")
                        .WithMany("DeviceSuspenseAccounts")
                        .HasForeignKey("CurrencyCode")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceSuspenseAccount_Currency");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("DeviceCITSuspenseAccounts")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_DeviceSuspenseAccount_DeviceList");

                    b.Navigation("Currency");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.EscrowJam", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", null)
                        .WithMany("EscrowJamAuthorisingUsers")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", null)
                        .WithMany("EscrowJamInitialisingUsers")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Transaction", "Transaction")
                        .WithMany("EscrowJams")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_EscrowJam_Transaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiPrepopItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "Value")
                        .WithMany("GuiPrepopItems")
                        .HasForeignKey("ValueId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIPrepopItem_TextItem");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiPrepopListItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiPrepopItem", "GuiPrepopItem")
                        .WithMany("GuiPrepopListItems")
                        .HasForeignKey("GuiPrepopItemId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIPrepopList_Item_GUIPrepopItem");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiPrepopList", "GuiPrepopList")
                        .WithMany("GuiPrepopListItems")
                        .HasForeignKey("GuiPrepopListId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIPrepopList_Item_GUIPrepopList");

                    b.Navigation("GuiPrepopItem");

                    b.Navigation("GuiPrepopList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreen", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenText", "GuiScreenText")
                        .WithMany("GuiScreens")
                        .HasForeignKey("GuiScreenTextId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreen_GUIScreenText");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenType", "GuiScreenType")
                        .WithMany("GuiScreens")
                        .HasForeignKey("GuiScreenTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreen_GUIScreenType");

                    b.Navigation("GuiScreenText");

                    b.Navigation("GuiScreenType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenList", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenListScreen", null)
                        .WithOne("GuiScreenList")
                        .HasForeignKey("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenList", "GuiScreenListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_GuiScreenList_Screen_GUIScreenList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenListScreen", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiPrepopList", "GuiPrepopList")
                        .WithMany("GuiScreenListScreens")
                        .HasForeignKey("GuiPrepopListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GuiScreenList_Screen_GUIPrepopList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiScreen", "GuiScreen")
                        .WithMany("GuiScreenListScreens")
                        .HasForeignKey("GuiScreenId")
                        .IsRequired()
                        .HasConstraintName("FK_GuiScreenList_Screen_GUIScreen");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenList", null)
                        .WithMany("GuiScreenListScreens")
                        .HasForeignKey("GuiScreenListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationList", "ValidationList")
                        .WithMany("GuiScreenListScreens")
                        .HasForeignKey("ValidationListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GuiScreenList_Screen_ValidationList");

                    b.Navigation("GuiPrepopList");

                    b.Navigation("GuiScreen");

                    b.Navigation("ValidationList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenText", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "BtnAcceptCaption")
                        .WithMany("GuiScreenTextBtnAcceptCaptions")
                        .HasForeignKey("BtnAcceptCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreenText_BtnAcceptCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "BtnBackCaption")
                        .WithMany("GuiScreenTextBtnBackCaptions")
                        .HasForeignKey("BtnBackCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreenText_BtnBackCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "BtnCancelCaption")
                        .WithMany("GuiScreenTextBtnCancelCaptions")
                        .HasForeignKey("BtnCancelCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreenText_BtnCancelCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "FullInstructions")
                        .WithMany("GuiScreenTextFullInstructions")
                        .HasForeignKey("FullInstructionsId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreenText_FullInstructions");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiScreen", "GuiScreen")
                        .WithMany("GuiScreenTexts")
                        .HasForeignKey("GuiScreenId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreenText_GUIScreen");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ScreenTitle")
                        .WithMany("GuiScreenTextScreenTitles")
                        .HasForeignKey("ScreenTitleId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreenText_ScreenTitle");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ScreenTitleInstruction")
                        .WithMany("GuiScreenTextScreenTitleInstructions")
                        .HasForeignKey("ScreenTitleInstructionId")
                        .IsRequired()
                        .HasConstraintName("FK_GUIScreenText_ScreenTitleInstruction");

                    b.Navigation("BtnAcceptCaption");

                    b.Navigation("BtnBackCaption");

                    b.Navigation("BtnCancelCaption");

                    b.Navigation("FullInstructions");

                    b.Navigation("GuiScreen");

                    b.Navigation("ScreenTitle");

                    b.Navigation("ScreenTitleInstruction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.LanguageList", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Language", "DefaultLanguage")
                        .WithMany("LanguageLists")
                        .HasForeignKey("DefaultLanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_LanguageList_Language");

                    b.Navigation("DefaultLanguage");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.LanguageListLanguage", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Language", "LanguageItem")
                        .WithMany("LanguageListLanguages")
                        .HasForeignKey("LanguageItemId")
                        .IsRequired()
                        .HasConstraintName("FK_LanguageList_Language_Language");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.LanguageList", "LanguageList")
                        .WithMany("LanguageListLanguages")
                        .HasForeignKey("LanguageListId")
                        .IsRequired()
                        .HasConstraintName("FK_LanguageList_Language_LanguageList");

                    b.Navigation("LanguageItem");

                    b.Navigation("LanguageList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ModelDifferenceAspect", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ModelDifference", "Owner")
                        .WithMany("ModelDifferenceAspects")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_ModelDifferenceAspect_Owner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PasswordHistory", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("ApplicationUserId")
                        .IsRequired()
                        .HasConstraintName("FK_PasswordHistory_User");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Permission", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Activity", "Activity")
                        .WithMany("Permissions")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_Permission_Activity");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Permission_Role");

                    b.Navigation("Activity");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyTypePermissionsObject", "TypePermissionObject")
                        .WithMany("PermissionPolicyMemberPermissionsObjects")
                        .HasForeignKey("TypePermissionObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PermissionPolicyMemberPermissionsObject_TypePermissionObject");

                    b.Navigation("TypePermissionObject");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyNavigationPermissionsObject", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyRole", "Role")
                        .WithMany("PermissionPolicyNavigationPermissionsObjects")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PermissionPolicyPermissionsObject_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyTypePermissionsObject", "TypePermissionObject")
                        .WithMany("PermissionPolicyObjectPermissionsObjects")
                        .HasForeignKey("TypePermissionObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PermissionPolicyObjectPermissionsObject_TypePermissionObject");

                    b.Navigation("TypePermissionObject");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyRole", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.XpobjectType", "ObjectType")
                        .WithMany("PermissionPolicyRoles")
                        .HasForeignKey("ObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PermissionPolicyRole_ObjectType");

                    b.Navigation("ObjectType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyTypePermissionsObject", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyRole", "Role")
                        .WithMany("PermissionPolicyTypePermissionsObjects")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PermissionPolicyTypePermissionsObject_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Printout", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Transaction", "Transaction")
                        .WithMany("Printouts")
                        .HasForeignKey("TxId")
                        .IsRequired()
                        .HasConstraintName("FK_Printout_Transaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SessionException", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.DepositorSession", "Session")
                        .WithMany("SessionExceptions")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK_SessionException_DepositorSession");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemCategory", "Category")
                        .WithMany("SysTextItems")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SysTextItem_SysTextItemCategory");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemType", "TextItemType")
                        .WithMany("SysTextItems")
                        .HasForeignKey("TextItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sysTextItem_sysTextItemType");

                    b.Navigation("Category");

                    b.Navigation("TextItemType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemCategory", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemCategory", "Parent")
                        .WithMany("Parents")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("FK_TextItemCategory_TextItemCategory");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextTranslation", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Language", "Language")
                        .WithMany("SysTextTranslations")
                        .HasForeignKey("LanguageCode")
                        .IsRequired()
                        .HasConstraintName("FK_sysTextTranslation_Language");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.SysTextItem", "SysTextItem")
                        .WithMany("SysTextTranslations")
                        .HasForeignKey("SysTextItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sysTextTranslation_sysTextItem");

                    b.Navigation("Language");

                    b.Navigation("SysTextItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItemCategory", "Category")
                        .WithMany("TextItems")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_UI_TextItem_TextItemCategory");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItemType", "TextItemType")
                        .WithMany("TextItems")
                        .HasForeignKey("TextItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UI_TextItem_TextItemType");

                    b.Navigation("Category");

                    b.Navigation("TextItemType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItemCategory", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItemCategory", "Parent")
                        .WithMany("Parents")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("FK_UI_TextItemCategory_TextItemCategory");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextTranslation", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Language", "Language")
                        .WithMany("TextTranslations")
                        .HasForeignKey("LanguageCode")
                        .IsRequired()
                        .HasConstraintName("FK_UI_Translation_Language");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "TextItem")
                        .WithMany("TextTranslations")
                        .HasForeignKey("TextItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UI_Translation_TextItem");

                    b.Navigation("Language");

                    b.Navigation("TextItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Transaction", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.CIT", "CIT")
                        .WithMany("Transactions")
                        .HasForeignKey("CITId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_CIT");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Device", "Device")
                        .WithMany("Transactions")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_DeviceList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.DepositorSession", "Session")
                        .WithMany("Transactions")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_DepositorSession");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "Currency")
                        .WithMany("Transactions")
                        .HasForeignKey("TxCurrency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Currency_Transaction");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", "TransactionTypeListItem")
                        .WithMany("Transactions")
                        .HasForeignKey("TxType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_TransactionTypeListItem");

                    b.Navigation("CIT");

                    b.Navigation("Currency");

                    b.Navigation("Device");

                    b.Navigation("Session");

                    b.Navigation("TransactionTypeListItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionException", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Transaction", "Transaction")
                        .WithMany("TransactionExceptions")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionException_Transaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitListItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "Currency")
                        .WithMany("TransactionLimitListItems")
                        .HasForeignKey("CurrencyCode")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionLimitListItem_Currency");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitList", "TransactionLimitList")
                        .WithMany("TransactionLimitListItems")
                        .HasForeignKey("TransactionLimitListId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionLimitListItem_TransactionLimitList");

                    b.Navigation("Currency");

                    b.Navigation("TransactionLimitList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionPosting", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "AuthorisingUser")
                        .WithMany("TransactionPostingAuthUsers")
                        .HasForeignKey("AuthorisingUserId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionPosting_AuthorisingUser");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "InitialisingUser")
                        .WithMany("TransactionPostingInitUsers")
                        .HasForeignKey("InitialisingUserId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionPosting_InitialisingUser");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Transaction", "Transaction")
                        .WithMany("TransactionPostings")
                        .HasForeignKey("TxId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionPosting_Transaction");

                    b.Navigation("AuthorisingUser");

                    b.Navigation("InitialisingUser");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionText", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "AccountNameCaption")
                        .WithMany("TransactionTextAccountNameCaptions")
                        .HasForeignKey("AccountNameCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_Account_Name_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "AccountNumberCaption")
                        .WithMany("TransactionTextAccountNumberCaptions")
                        .HasForeignKey("AccountNumberCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_Account_Number_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "AliasAccountNameCaption")
                        .WithMany("TransactionTextAliasAccountNameCaptions")
                        .HasForeignKey("AliasAccountNameCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_Alias_Account_Name_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "AliasAccountNumberCaption")
                        .WithMany("TransactionTextAliasAccountNumberCaptions")
                        .HasForeignKey("AliasAccountNumberCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_Alias_Account_Number_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "DepositorNameCaption")
                        .WithMany("TransactionTextDepositorNameCaptions")
                        .HasForeignKey("DepositorNameCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_Depositor_Name_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "Disclaimer")
                        .WithMany("TransactionTextDisclaimers")
                        .HasForeignKey("DisclaimerId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_Disclaimers");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "FullInstructions")
                        .WithMany("TransactionTextFullInstructions")
                        .HasForeignKey("FullInstructionsId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_full_instructions");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "FundsSourceCaption")
                        .WithMany("TransactionTextFundsSourceCaptions")
                        .HasForeignKey("FundsSourceCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_Funds_Source_Caption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "IdNumberCaption")
                        .WithMany("TransactionTextIdNumberCaptions")
                        .HasForeignKey("IdNumberCaptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_IdNumberCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ListItemCaption")
                        .WithMany("TransactionTextListItemCaptions")
                        .HasForeignKey("ListItemCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_ListItemCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "NarrationCaption")
                        .WithMany("TransactionTextNarrationCaptions")
                        .HasForeignKey("NarrationCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_NarrationCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "PhoneNumberCaption")
                        .WithMany("TransactionTextPhoneNumberCaptions")
                        .HasForeignKey("PhoneNumberCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_PhoneNumberCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ReceiptTemplate")
                        .WithMany("TransactionTextReceiptTemplates")
                        .HasForeignKey("ReceiptTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_ReceiptTemplate");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ReferenceAccountNameCaption")
                        .WithMany("TransactionTextReferenceAccountNameCaptions")
                        .HasForeignKey("ReferenceAccountNameCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_ReferenceAccountNameCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ReferenceAccountNumberCaption")
                        .WithMany("TransactionTextReferenceAccountNumberCaptions")
                        .HasForeignKey("ReferenceAccountNumberCaptionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_ReferenceAccountNumberCaption");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "Terms")
                        .WithMany("TransactionTextTerms")
                        .HasForeignKey("TermsId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_Terms");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", "TxItem")
                        .WithOne("TransactionText")
                        .HasForeignKey("Cashmere.Library.CashmereDataAccess.Entities.TransactionText", "TxItemId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionText_TransactionTypeListItem");

                    b.Navigation("AccountNameCaption");

                    b.Navigation("AccountNumberCaption");

                    b.Navigation("AliasAccountNameCaption");

                    b.Navigation("AliasAccountNumberCaption");

                    b.Navigation("DepositorNameCaption");

                    b.Navigation("Disclaimer");

                    b.Navigation("FullInstructions");

                    b.Navigation("FundsSourceCaption");

                    b.Navigation("IdNumberCaption");

                    b.Navigation("ListItemCaption");

                    b.Navigation("NarrationCaption");

                    b.Navigation("PhoneNumberCaption");

                    b.Navigation("ReceiptTemplate");

                    b.Navigation("ReferenceAccountNameCaption");

                    b.Navigation("ReferenceAccountNumberCaption");

                    b.Navigation("Terms");

                    b.Navigation("TxItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.Currency", "DefaultAccountCurrency")
                        .WithMany("TransactionTypeListItems")
                        .HasForeignKey("DefaultAccountCurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionTypeListItem_Currency");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitList", "TxLimitList")
                        .WithMany("TransactionTypeListItems")
                        .HasForeignKey("TxLimitListId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionTypeListItem_TransactionLimitList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionText", "TxText")
                        .WithMany("TransactionTypeListItems")
                        .HasForeignKey("TxTextId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_TransactionTypeListItem_TransactionText");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenList", "TxTypeGuiScreenList")
                        .WithMany("TransactionTypeListItems")
                        .HasForeignKey("TxTypeGuiScreenListId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionTypeListItem_GUIScreenList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionType", "TxType")
                        .WithMany("TransactionTypeListItems")
                        .HasForeignKey("TxTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionListItem_TransactionType");

                    b.Navigation("DefaultAccountCurrency");

                    b.Navigation("TxLimitList");

                    b.Navigation("TxText");

                    b.Navigation("TxType");

                    b.Navigation("TxTypeGuiScreenList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListTransactionTypeListItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeList", "TxTypeList")
                        .WithMany("TransactionTypeListTransactionTypeListItems")
                        .HasForeignKey("TxtypeListId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionTypeList_TransactionTypeListItem_TransactionTypeList");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", "TxTypeListItem")
                        .WithMany("TransactionTypeListTransactionTypeListItems")
                        .HasForeignKey("TxtypeListItemId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionTypeList_TransactionTypeListItem_TransactionTypeListItem");

                    b.Navigation("TxTypeList");

                    b.Navigation("TxTypeListItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", "ParentGroup")
                        .WithMany("ParentGroups")
                        .HasForeignKey("ParentGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_UserGroup");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UserLock", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUserLoginDetail", "ApplicationUserLoginDetail")
                        .WithMany("UserLocks")
                        .HasForeignKey("ApplicationUserLoginDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserLock_ApplicationUserLoginDetail");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "InitiatingUser")
                        .WithMany("UserLocks")
                        .HasForeignKey("InitiatingUserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserLock_InitiatingUser");

                    b.Navigation("ApplicationUserLoginDetail");

                    b.Navigation("InitiatingUser");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationText", "ValidationText")
                        .WithMany("ValidationItems")
                        .HasForeignKey("ValidationTextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ValidationItem_ValidationText");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationType", "ValidationType")
                        .WithMany("ValidationItems")
                        .HasForeignKey("ValidationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationItem_ValidationType");

                    b.Navigation("ValidationText");

                    b.Navigation("ValidationType");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationItemValue", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", "ValidationItem")
                        .WithMany("ValidationItemValues")
                        .HasForeignKey("ValidationItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationItemValue_ValidationItem");

                    b.Navigation("ValidationItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationListValidationItem", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", "ValidationItem")
                        .WithMany("ValidationListValidationItems")
                        .HasForeignKey("ValidationItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationList_ValidationItem_ValidationItem");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationList", "ValidationList")
                        .WithMany("ValidationListValidationItems")
                        .HasForeignKey("ValidationListId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationList_ValidationItem_ValidationList");

                    b.Navigation("ValidationItem");

                    b.Navigation("ValidationList");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationText", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "ErrorMessage")
                        .WithMany("ValidationTextErrorMessages")
                        .HasForeignKey("ErrorMessageId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationText_ErrorMessage");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.TextItem", "SuccessMessage")
                        .WithMany("ValidationTextSuccessMessages")
                        .HasForeignKey("SuccessMessageId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationText_SuccessMessage");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", "ValidationItem")
                        .WithMany("ValidationTexts")
                        .HasForeignKey("ValidationItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationText_ValidationItem");

                    b.Navigation("ErrorMessage");

                    b.Navigation("SuccessMessage");

                    b.Navigation("ValidationItem");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.WebPortalLogin", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUserLoginDetail", "ApplicationUserLoginDetail")
                        .WithMany("WebPortalLogins")
                        .HasForeignKey("ApplicationUserLoginDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WebPortalLogin_ApplicationUserLoginDetail");

                    b.Navigation("ApplicationUserLoginDetail");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.WebPortalRole", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyRole", "PermissionPolicyRole")
                        .WithOne("WebPortalRole")
                        .HasForeignKey("Cashmere.Library.CashmereDataAccess.Entities.WebPortalRole", "Oid")
                        .IsRequired()
                        .HasConstraintName("FK_WebPortalRole_Oid");

                    b.Navigation("PermissionPolicyRole");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.WebPortalRoleRolesApplicationUserApplicationUser", b =>
                {
                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", "ApplicationUsers")
                        .WithMany("WebPortalRoleRolesApplicationUserApplicationUsers")
                        .HasForeignKey("ApplicationUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WebPortalRoleRoles_ApplicationUserApplicationUsers_ApplicationUsers");

                    b.HasOne("Cashmere.Library.CashmereDataAccess.Entities.WebPortalRole", "Roles")
                        .WithMany("WebPortalRoleRolesApplicationUserApplicationUsers")
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WebPortalRoleRoles_ApplicationUserApplicationUsers_Roles");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Activity", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertEvent", b =>
                {
                    b.Navigation("AlertEmails");

                    b.Navigation("AlertSMSes");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.AlertMessageType", b =>
                {
                    b.Navigation("AlertMessageRegistries");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserChangePasswords");

                    b.Navigation("ApplicationUserLoginDetails");

                    b.Navigation("CITAuthUsers");

                    b.Navigation("CITStartUsers");

                    b.Navigation("DeviceLocks");

                    b.Navigation("DeviceLogins");

                    b.Navigation("EscrowJamAuthorisingUsers");

                    b.Navigation("EscrowJamInitialisingUsers");

                    b.Navigation("PasswordHistories");

                    b.Navigation("TransactionPostingAuthUsers");

                    b.Navigation("TransactionPostingInitUsers");

                    b.Navigation("UserLocks");

                    b.Navigation("WebPortalRoleRolesApplicationUserApplicationUsers");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ApplicationUserLoginDetail", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("UserLocks");

                    b.Navigation("WebPortalLogins");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Bank", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Branch", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CIT", b =>
                {
                    b.Navigation("AuthorisingUser")
                        .IsRequired();

                    b.Navigation("CITDenominations");

                    b.Navigation("CITPrintouts");

                    b.Navigation("CITTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Config", b =>
                {
                    b.Navigation("DeviceConfigs");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ConfigCategory", b =>
                {
                    b.Navigation("Configs");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ConfigGroup", b =>
                {
                    b.Navigation("DeviceConfigs");

                    b.Navigation("Devices");

                    b.Navigation("ParentGroups");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Country", b =>
                {
                    b.Navigation("Banks");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Currency", b =>
                {
                    b.Navigation("CITDenominations");

                    b.Navigation("CurrencyListCurrencies");

                    b.Navigation("CurrencyLists");

                    b.Navigation("DeviceCITSuspenseAccounts");

                    b.Navigation("DeviceSuspenseAccounts");

                    b.Navigation("TransactionLimitListItems");

                    b.Navigation("TransactionTypeListItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.CurrencyList", b =>
                {
                    b.Navigation("CurrencyListCurrencies");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DepositorSession", b =>
                {
                    b.Navigation("ApplicationLogs");

                    b.Navigation("SessionExceptions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Device", b =>
                {
                    b.Navigation("ApplicationExceptions");

                    b.Navigation("ApplicationLogs");

                    b.Navigation("CITs");

                    b.Navigation("CrashEvents");

                    b.Navigation("DepositorSessions");

                    b.Navigation("DeviceCITSuspenseAccounts");

                    b.Navigation("DeviceLocks");

                    b.Navigation("DeviceLogins");

                    b.Navigation("DevicePrinters");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.DeviceType", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.EscrowJam", b =>
                {
                    b.Navigation("AuthorisingUser")
                        .IsRequired();

                    b.Navigation("InitialisingUser")
                        .IsRequired();
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiPrepopItem", b =>
                {
                    b.Navigation("GuiPrepopListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiPrepopList", b =>
                {
                    b.Navigation("GuiPrepopListItems");

                    b.Navigation("GuiScreenListScreens");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreen", b =>
                {
                    b.Navigation("GuiScreenListScreens");

                    b.Navigation("GuiScreenTexts");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenList", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("GuiScreenListScreens");

                    b.Navigation("TransactionTypeListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenListScreen", b =>
                {
                    b.Navigation("GuiScreenList")
                        .IsRequired();
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenText", b =>
                {
                    b.Navigation("GuiScreens");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.GuiScreenType", b =>
                {
                    b.Navigation("GuiScreens");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Language", b =>
                {
                    b.Navigation("DepositorSessions");

                    b.Navigation("LanguageListLanguages");

                    b.Navigation("LanguageLists");

                    b.Navigation("SysTextTranslations");

                    b.Navigation("TextTranslations");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.LanguageList", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("LanguageListLanguages");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ModelDifference", b =>
                {
                    b.Navigation("ModelDifferenceAspects");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PasswordPolicy", b =>
                {
                    b.Navigation("ApplicationUserChangePasswords");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyRole", b =>
                {
                    b.Navigation("PermissionPolicyNavigationPermissionsObjects");

                    b.Navigation("PermissionPolicyTypePermissionsObjects");

                    b.Navigation("WebPortalRole")
                        .IsRequired();
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.PermissionPolicyTypePermissionsObject", b =>
                {
                    b.Navigation("PermissionPolicyMemberPermissionsObjects");

                    b.Navigation("PermissionPolicyObjectPermissionsObjects");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Role", b =>
                {
                    b.Navigation("AlertMessageRegistries");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItem", b =>
                {
                    b.Navigation("SysTextTranslations");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemCategory", b =>
                {
                    b.Navigation("Parents");

                    b.Navigation("SysTextItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.SysTextItemType", b =>
                {
                    b.Navigation("SysTextItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItem", b =>
                {
                    b.Navigation("GuiPrepopItems");

                    b.Navigation("GuiScreenTextBtnAcceptCaptions");

                    b.Navigation("GuiScreenTextBtnBackCaptions");

                    b.Navigation("GuiScreenTextBtnCancelCaptions");

                    b.Navigation("GuiScreenTextFullInstructions");

                    b.Navigation("GuiScreenTextScreenTitleInstructions");

                    b.Navigation("GuiScreenTextScreenTitles");

                    b.Navigation("TextTranslations");

                    b.Navigation("TransactionTextAccountNameCaptions");

                    b.Navigation("TransactionTextAccountNumberCaptions");

                    b.Navigation("TransactionTextAliasAccountNameCaptions");

                    b.Navigation("TransactionTextAliasAccountNumberCaptions");

                    b.Navigation("TransactionTextDepositorNameCaptions");

                    b.Navigation("TransactionTextDisclaimers");

                    b.Navigation("TransactionTextFullInstructions");

                    b.Navigation("TransactionTextFundsSourceCaptions");

                    b.Navigation("TransactionTextIdNumberCaptions");

                    b.Navigation("TransactionTextListItemCaptions");

                    b.Navigation("TransactionTextNarrationCaptions");

                    b.Navigation("TransactionTextPhoneNumberCaptions");

                    b.Navigation("TransactionTextReceiptTemplates");

                    b.Navigation("TransactionTextReferenceAccountNameCaptions");

                    b.Navigation("TransactionTextReferenceAccountNumberCaptions");

                    b.Navigation("TransactionTextTerms");

                    b.Navigation("ValidationTextErrorMessages");

                    b.Navigation("ValidationTextSuccessMessages");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItemCategory", b =>
                {
                    b.Navigation("Parents");

                    b.Navigation("TextItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TextItemType", b =>
                {
                    b.Navigation("TextItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.Transaction", b =>
                {
                    b.Navigation("DenominationDetails");

                    b.Navigation("EscrowJams");

                    b.Navigation("Printouts");

                    b.Navigation("TransactionExceptions");

                    b.Navigation("TransactionPostings");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionLimitList", b =>
                {
                    b.Navigation("TransactionLimitListItems");

                    b.Navigation("TransactionTypeListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionText", b =>
                {
                    b.Navigation("TransactionTypeListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionType", b =>
                {
                    b.Navigation("TransactionTypeListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeList", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("TransactionTypeListTransactionTypeListItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.TransactionTypeListItem", b =>
                {
                    b.Navigation("TransactionText")
                        .IsRequired();

                    b.Navigation("TransactionTypeListTransactionTypeListItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.UserGroup", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Devices");

                    b.Navigation("ParentGroups");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationItem", b =>
                {
                    b.Navigation("ValidationItemValues");

                    b.Navigation("ValidationListValidationItems");

                    b.Navigation("ValidationTexts");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationList", b =>
                {
                    b.Navigation("GuiScreenListScreens");

                    b.Navigation("ValidationListValidationItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationText", b =>
                {
                    b.Navigation("ValidationItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.ValidationType", b =>
                {
                    b.Navigation("ValidationItems");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.WebPortalLogin", b =>
                {
                    b.Navigation("ApplicationUserLoginDetails");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.WebPortalRole", b =>
                {
                    b.Navigation("WebPortalRoleRolesApplicationUserApplicationUsers");
                });

            modelBuilder.Entity("Cashmere.Library.CashmereDataAccess.Entities.XpobjectType", b =>
                {
                    b.Navigation("PermissionPolicyRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
