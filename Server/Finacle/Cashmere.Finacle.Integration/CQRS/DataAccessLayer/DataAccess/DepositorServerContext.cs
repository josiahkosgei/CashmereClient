// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models;

namespace Cashmere.Finacle.Integration.CQRS.DataAccessLayer.DataAccess
{
    public partial class DepositorServerContext : DbContext
    {
        public DepositorServerContext()
        {
        }

        public DepositorServerContext(DbContextOptions<DepositorServerContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountPermission> AccountPermissions { get; set; }
        public virtual DbSet<AccountPermissionItem> AccountPermissionItems { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<TransactionTypeListItem> TransactionTypeListItems { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=SVDRCASHDEPOSIT\\CASHMERESERVER16;Initial Catalog=DepositorServer_6_3;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            
            modelBuilder.Entity<Bank>(entity =>
            {
                entity.HasComment("The bank that owns the depositor");

                entity.Property(e => e.Id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.CountryCode).IsFixedLength();
            });

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.Branches)
                    .HasForeignKey(d => d.BankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Branch_Bank");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasComment("Currency enumeration");

                entity.Property(e => e.Code)
                    .IsFixedLength()
                    .HasComment("ISO 4217 Three Character Currency Code");

                entity.Property(e => e.Enabled).HasComment("whether the system supports the language");

                entity.Property(e => e.Flag).HasComment("two character country code for the national flag to display for the language");

                entity.Property(e => e.Minor).HasComment("Expresses the relationship between a major currency unit and its corresponding minor currency unit. This mechanism is called the currency \"exponent\" and assumes a base of 10. Will be used with converters in the GUI");

                entity.Property(e => e.Name).HasComment("Name of the currency");
            });

            modelBuilder.Entity<TransactionTypeListItem>(entity =>
            {
                entity.HasComment("Transactions that the system can perform e.g. regular deposit, Mpesa deposit, etc");

                entity.Property(e => e.CbTxType).HasComment("A string passed to core banking with transaction details so core banking can route the deposit to the correct handler");

                entity.Property(e => e.DefaultAccount).HasComment("the default account that pre-polulates the AccountNumber of a transaction");

                entity.Property(e => e.DefaultAccountCurrency)
                    .HasDefaultValueSql("('KES')")
                    .IsFixedLength();

                entity.Property(e => e.Description).HasComment("common description for the transaction type");

                entity.Property(e => e.Enabled).HasDefaultValueSql("((1))");

                entity.Property(e => e.FundsSourceAmount).HasComment("The amount after which the Source of Funds screen will be shown");

                entity.Property(e => e.IconPath).HasComment("the location of the picture representing the transaction in the GUI");

                entity.Property(e => e.Name).HasComment("common name for the transaction e.g. Mpesa Deposit");

                entity.Property(e => e.OverdepositAmount).HasComment("The amount after which the CDM will disable the counter");

                entity.Property(e => e.PreventOverdeposit).HasComment("CDM will not accept further deposits past the maximum");

                entity.Property(e => e.ShowFundsSource).HasComment("Whether to show the source of funds screen after deposit limit is reached or passed");
            });
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}