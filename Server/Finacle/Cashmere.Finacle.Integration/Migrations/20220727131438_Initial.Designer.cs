// <auto-generated />
using System;
using Cashmere.Finacle.Integration.CQRS.DataAccessLayer.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cashmere.Finacle.Integration.Migrations
{
    [DbContext(typeof(DepositorServerContext))]
    [Migration("20220727131438_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Account", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Icon")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.AccountPermission", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ListType")
                        .HasColumnType("int");

                    b.Property<bool>("enabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("error_message")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("txType")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("AccountPermissions");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.AccountPermissionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountPermission")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountPermissionItems");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bank_code");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("country_code")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Bank");

                    b.HasComment("The bank that owns the depositor");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bank_id");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("branch_code");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BankId" }, "ibank_id_Branch");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("code")
                        .IsFixedLength()
                        .HasComment("ISO 4217 Three Character Currency Code");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled")
                        .HasComment("whether the system supports the language");

                    b.Property<string>("Flag")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("flag")
                        .HasComment("two character country code for the national flag to display for the language");

                    b.Property<string>("ISO_3_Numeric_Code")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("iso_3_numeric_code");

                    b.Property<int>("Minor")
                        .HasColumnType("int")
                        .HasColumnName("minor")
                        .HasComment("Expresses the relationship between a major currency unit and its corresponding minor currency unit. This mechanism is called the currency \"exponent\" and assumes a base of 10. Will be used with converters in the GUI");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasComment("Name of the currency");

                    b.HasKey("Code");

                    b.ToTable("Currency");

                    b.HasComment("Currency enumeration");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("branch_id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("device_location");

                    b.Property<string>("DeviceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("device_number");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int")
                        .HasColumnName("login_attempts");

                    b.Property<int>("LoginCycles")
                        .HasColumnType("int")
                        .HasColumnName("login_cycles");

                    b.Property<string>("MachineName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("machine_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "ibranch_id_DeviceList");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.TransactionTypeListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CbTxType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cb_tx_type")
                        .HasComment("A string passed to core banking with transaction details so core banking can route the deposit to the correct handler");

                    b.Property<string>("DefaultAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("default_account")
                        .HasComment("the default account that pre-polulates the AccountNumber of a transaction");

                    b.Property<string>("DefaultAccountCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("default_account_currency")
                        .HasDefaultValueSql("('KES')")
                        .IsFixedLength();

                    b.Property<string>("DefaultAccountName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("default_account_name");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description")
                        .HasComment("common description for the transaction type");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("FundsSourceAmount")
                        .HasColumnType("int")
                        .HasColumnName("funds_source_amount")
                        .HasComment("The amount after which the Source of Funds screen will be shown");

                    b.Property<string>("IconPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("icon_path")
                        .HasComment("the location of the picture representing the transaction in the GUI");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name")
                        .HasComment("common name for the transaction e.g. Mpesa Deposit");

                    b.Property<int>("OverdepositAmount")
                        .HasColumnType("int")
                        .HasColumnName("overdeposit_amount")
                        .HasComment("The amount after which the CDM will disable the counter");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<bool>("PreventOverdeposit")
                        .HasColumnType("bit")
                        .HasColumnName("prevent_overdeposit")
                        .HasComment("CDM will not accept further deposits past the maximum");

                    b.Property<bool>("ShowFundsSource")
                        .HasColumnType("bit")
                        .HasColumnName("show_funds_source")
                        .HasComment("Whether to show the source of funds screen after deposit limit is reached or passed");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.Property<bool>("ValidateDefaultAccount")
                        .HasColumnType("bit")
                        .HasColumnName("validate_default_account");

                    b.Property<bool>("ValidateReferenceAccount")
                        .HasColumnType("bit")
                        .HasColumnName("validate_reference_account");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DefaultAccountCurrency" }, "idefault_account_currency_TransactionTypeListItem");

                    b.ToTable("TransactionTypeListItem");

                    b.HasComment("Transactions that the system can perform e.g. regular deposit, Mpesa deposit, etc");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Branch", b =>
                {
                    b.HasOne("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Bank", "Bank")
                        .WithMany("Branches")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Branch_Bank");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Device", b =>
                {
                    b.HasOne("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Branch", "Branch")
                        .WithMany("Devices")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.TransactionTypeListItem", b =>
                {
                    b.HasOne("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Currency", "DefaultAccountCurrencyNavigation")
                        .WithMany()
                        .HasForeignKey("DefaultAccountCurrency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultAccountCurrencyNavigation");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Bank", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Cashmere.Finacle.Integration.CQRS.DataAccessLayer.Models.Branch", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
